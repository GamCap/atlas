{
    "Description": "Self-hosted Supabase",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Supabase - Auth Settings"
                    },
                    "Parameters": [
                        "DisableSignup",
                        "SiteUrl",
                        "RedirectUrls",
                        "JwtExpiryLimit",
                        "PasswordMinLength"
                    ]
                },
                {
                    "Label": {
                        "default": "Supabase - SMTP Settings"
                    },
                    "Parameters": [
                        "Email",
                        "SenderName",
                        "SesRegion",
                        "EnableWorkMail"
                    ]
                },
                {
                    "Label": {
                        "default": "Supabase - Versions (Container Images)"
                    },
                    "Parameters": [
                        "AuthImageUri",
                        "RestImageUri",
                        "RealtimeImageUri",
                        "StorageImageUri",
                        "ImgproxyImageUri",
                        "PostgresMetaImageUri",
                        "StudioBranch"
                    ]
                },
                {
                    "Label": {
                        "default": "Infrastructure Settings"
                    },
                    "Parameters": [
                        "EnableHighAvailability",
                        "WebAclArn"
                    ]
                },
                {
                    "Label": {
                        "default": "Infrastructure Settings - Database"
                    },
                    "Parameters": [
                        "MinACU",
                        "MaxACU"
                    ]
                },
                {
                    "Label": {
                        "default": "Infrastructure Settings - Containers"
                    },
                    "Parameters": [
                        "KongTaskSize93C195E9",
                        "AuthTaskSize9895C206",
                        "RestTaskSize14E11A14",
                        "RealtimeTaskSize6077FE1F",
                        "StorageTaskSizeB82D9CFB",
                        "ImgproxyTaskSize5D0DD9F6",
                        "MetaTaskSize556D36D9"
                    ]
                },
                {
                    "Label": {
                        "default": "External Auth Provider 1"
                    },
                    "Parameters": [
                        "AuthProvider1Name740DD3F6",
                        "AuthProvider1ClientId5614D178",
                        "AuthProvider1SecretAE54364F"
                    ]
                },
                {
                    "Label": {
                        "default": "External Auth Provider 2"
                    },
                    "Parameters": [
                        "AuthProvider2Name573986E5",
                        "AuthProvider2ClientIdF3685A2B",
                        "AuthProvider2Secret2662F55E"
                    ]
                },
                {
                    "Label": {
                        "default": "External Auth Provider 3"
                    },
                    "Parameters": [
                        "AuthProvider3NameA8A7785F",
                        "AuthProvider3ClientId8DF3C6F7",
                        "AuthProvider3Secret29364F33"
                    ]
                }
            ],
            "ParameterLabels": {
                "DisableSignup": {
                    "default": "Disable User Signups"
                },
                "SiteUrl": {
                    "default": "Site URL"
                },
                "RedirectUrls": {
                    "default": "Redirect URLs"
                },
                "JwtExpiryLimit": {
                    "default": "JWT expiry limit"
                },
                "PasswordMinLength": {
                    "default": "Min password length"
                },
                "Email": {
                    "default": "Sender Email Address"
                },
                "SenderName": {
                    "default": "Sender Name"
                },
                "SesRegion": {
                    "default": "Amazon SES Region"
                },
                "EnableWorkMail": {
                    "default": "Enable Test E-mail Domain (via Amazon WorkMail)"
                },
                "AuthImageUri": {
                    "default": "Image URI - GoTrue"
                },
                "RestImageUri": {
                    "default": "Image URI - PostgREST"
                },
                "RealtimeImageUri": {
                    "default": "Image URI - Realtime"
                },
                "StorageImageUri": {
                    "default": "Image URI - Storage"
                },
                "ImgproxyImageUri": {
                    "default": "Image URI - imgproxy"
                },
                "PostgresMetaImageUri": {
                    "default": "Image URI - postgres-meta"
                },
                "EnableHighAvailability": {
                    "default": "High Availability (HA)"
                },
                "WebAclArn": {
                    "default": "Web ACL ARN (AWS WAF)"
                },
                "MinACU": {
                    "default": "Minimum ACUs"
                },
                "MaxACU": {
                    "default": "Maximum ACUs"
                },
                "KongTaskSize93C195E9": {
                    "default": "Task Size - Kong"
                },
                "AuthTaskSize9895C206": {
                    "default": "Task Size - GoTrue"
                },
                "RestTaskSize14E11A14": {
                    "default": "Task Size - PostgREST"
                },
                "RealtimeTaskSize6077FE1F": {
                    "default": "Task Size - Realtime"
                },
                "StorageTaskSizeB82D9CFB": {
                    "default": "Task Size - Storage"
                },
                "ImgproxyTaskSize5D0DD9F6": {
                    "default": "Task Size - imgproxy"
                },
                "MetaTaskSize556D36D9": {
                    "default": "Task Size - postgres-meta"
                },
                "StudioBranch": {
                    "default": "Supabase Studio Branch"
                },
                "AuthProvider1Name740DD3F6": {
                    "default": "Provider Name"
                },
                "AuthProvider1ClientId5614D178": {
                    "default": "Client ID"
                },
                "AuthProvider1SecretAE54364F": {
                    "default": "Client Secret"
                },
                "AuthProvider2Name573986E5": {
                    "default": "Provider Name"
                },
                "AuthProvider2ClientIdF3685A2B": {
                    "default": "Client ID"
                },
                "AuthProvider2Secret2662F55E": {
                    "default": "Client Secret"
                },
                "AuthProvider3NameA8A7785F": {
                    "default": "Provider Name"
                },
                "AuthProvider3ClientId8DF3C6F7": {
                    "default": "Client ID"
                },
                "AuthProvider3Secret29364F33": {
                    "default": "Client Secret"
                }
            }
        }
    },
    "Mappings": {
        "TaskSize": {
            "none": {
                "cpu": 256,
                "memory": 512
            },
            "micro": {
                "cpu": 256,
                "memory": 512
            },
            "small": {
                "cpu": 512,
                "memory": 1024
            },
            "medium": {
                "cpu": 1024,
                "memory": 2048
            },
            "large": {
                "cpu": 2048,
                "memory": 4096
            },
            "xlarge": {
                "cpu": 4096,
                "memory": 8192
            },
            "2xlarge": {
                "cpu": 8192,
                "memory": 16384
            },
            "4xlarge": {
                "cpu": 16384,
                "memory": 32768
            }
        },
        "ServiceprincipalMap": {
            "af-south-1": {
                "states": "states.af-south-1.amazonaws.com"
            },
            "ap-east-1": {
                "states": "states.ap-east-1.amazonaws.com"
            },
            "ap-northeast-1": {
                "states": "states.ap-northeast-1.amazonaws.com"
            },
            "ap-northeast-2": {
                "states": "states.ap-northeast-2.amazonaws.com"
            },
            "ap-northeast-3": {
                "states": "states.ap-northeast-3.amazonaws.com"
            },
            "ap-south-1": {
                "states": "states.ap-south-1.amazonaws.com"
            },
            "ap-south-2": {
                "states": "states.ap-south-2.amazonaws.com"
            },
            "ap-southeast-1": {
                "states": "states.ap-southeast-1.amazonaws.com"
            },
            "ap-southeast-2": {
                "states": "states.ap-southeast-2.amazonaws.com"
            },
            "ap-southeast-3": {
                "states": "states.ap-southeast-3.amazonaws.com"
            },
            "ap-southeast-4": {
                "states": "states.ap-southeast-4.amazonaws.com"
            },
            "ca-central-1": {
                "states": "states.ca-central-1.amazonaws.com"
            },
            "cn-north-1": {
                "states": "states.cn-north-1.amazonaws.com"
            },
            "cn-northwest-1": {
                "states": "states.cn-northwest-1.amazonaws.com"
            },
            "eu-central-1": {
                "states": "states.eu-central-1.amazonaws.com"
            },
            "eu-central-2": {
                "states": "states.eu-central-2.amazonaws.com"
            },
            "eu-north-1": {
                "states": "states.eu-north-1.amazonaws.com"
            },
            "eu-south-1": {
                "states": "states.eu-south-1.amazonaws.com"
            },
            "eu-south-2": {
                "states": "states.eu-south-2.amazonaws.com"
            },
            "eu-west-1": {
                "states": "states.eu-west-1.amazonaws.com"
            },
            "eu-west-2": {
                "states": "states.eu-west-2.amazonaws.com"
            },
            "eu-west-3": {
                "states": "states.eu-west-3.amazonaws.com"
            },
            "il-central-1": {
                "states": "states.il-central-1.amazonaws.com"
            },
            "me-central-1": {
                "states": "states.me-central-1.amazonaws.com"
            },
            "me-south-1": {
                "states": "states.me-south-1.amazonaws.com"
            },
            "sa-east-1": {
                "states": "states.sa-east-1.amazonaws.com"
            },
            "us-east-1": {
                "states": "states.us-east-1.amazonaws.com"
            },
            "us-east-2": {
                "states": "states.us-east-2.amazonaws.com"
            },
            "us-gov-east-1": {
                "states": "states.us-gov-east-1.amazonaws.com"
            },
            "us-gov-west-1": {
                "states": "states.us-gov-west-1.amazonaws.com"
            },
            "us-iso-east-1": {
                "states": "states.amazonaws.com"
            },
            "us-iso-west-1": {
                "states": "states.amazonaws.com"
            },
            "us-isob-east-1": {
                "states": "states.amazonaws.com"
            },
            "us-west-1": {
                "states": "states.us-west-1.amazonaws.com"
            },
            "us-west-2": {
                "states": "states.us-west-2.amazonaws.com"
            }
        }
    },
    "Parameters": {
        "DisableSignup": {
            "Type": "String",
            "Default": "false",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Description": "When signup is disabled the only way to create new users is through invites. Defaults to false, all signups enabled."
        },
        "SiteUrl": {
            "Type": "String",
            "Default": "http://localhost:3000",
            "Description": "The base URL your site is located at. Currently used in combination with other settings to construct URLs used in emails."
        },
        "RedirectUrls": {
            "Type": "String",
            "Default": "",
            "Description": "URLs that auth providers are permitted to redirect to post authentication"
        },
        "JwtExpiryLimit": {
            "Type": "Number",
            "Default": 3600,
            "Description": "How long tokens are valid for. Defaults to 3600 (1 hour), maximum 604,800 seconds (one week).",
            "MaxValue": 604800,
            "MinValue": 300
        },
        "PasswordMinLength": {
            "Type": "Number",
            "Default": "8",
            "Description": "When signup is disabled the only way to create new users is through invites. Defaults to false, all signups enabled.",
            "MaxValue": 128,
            "MinValue": 8
        },
        "Email": {
            "Type": "String",
            "Default": "noreply@example.com",
            "AllowedPattern": "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$",
            "ConstraintDescription": "must be a valid email address",
            "Description": "This is the email address the emails are sent from. If Amazon WorkMail is enabled, it set \"noreply@supabase-<account_id>.awsapps.com\""
        },
        "SenderName": {
            "Type": "String",
            "Default": "Supabase",
            "Description": "The From email sender name for all emails sent."
        },
        "AuthImageUri": {
            "Type": "String",
            "Default": "public.ecr.aws/supabase/gotrue:v2.110.0",
            "Description": "https://gallery.ecr.aws/supabase/gotrue"
        },
        "RestImageUri": {
            "Type": "String",
            "Default": "public.ecr.aws/supabase/postgrest:v11.2.0",
            "Description": "https://gallery.ecr.aws/supabase/postgrest"
        },
        "RealtimeImageUri": {
            "Type": "String",
            "Default": "public.ecr.aws/supabase/realtime:v2.25.27",
            "Description": "https://gallery.ecr.aws/supabase/realtime"
        },
        "StorageImageUri": {
            "Type": "String",
            "Default": "public.ecr.aws/supabase/storage-api:v0.43.11",
            "Description": "https://gallery.ecr.aws/supabase/storage-api"
        },
        "ImgproxyImageUri": {
            "Type": "String",
            "Default": "public.ecr.aws/supabase/imgproxy:v1.2.0",
            "Description": "https://gallery.ecr.aws/supabase/imgproxy"
        },
        "PostgresMetaImageUri": {
            "Type": "String",
            "Default": "public.ecr.aws/supabase/postgres-meta:v0.74.2",
            "Description": "https://gallery.ecr.aws/supabase/postgres-meta"
        },
        "EnableHighAvailability": {
            "Type": "String",
            "Default": "false",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Description": "Enable auto-scaling and clustering (Multi-AZ)."
        },
        "WebAclArn": {
            "Type": "String",
            "Default": "",
            "AllowedPattern": "^arn:aws:wafv2:us-east-1:[0-9]{12}:global/webacl/[\\w-]+/[\\w]{8}-[\\w]{4}-[\\w]{4}-[\\w]{4}-[\\w]{12}$|",
            "Description": "Web ACL for CloudFront."
        },
        "MinACU": {
            "Type": "Number",
            "Default": 0.5,
            "Description": "The minimum number of Aurora capacity units (ACU) for a DB instance in an Aurora Serverless v2 cluster.",
            "MaxValue": 128,
            "MinValue": 0.5
        },
        "MaxACU": {
            "Type": "Number",
            "Default": 32,
            "Description": "The maximum number of Aurora capacity units (ACU) for a DB instance in an Aurora Serverless v2 cluster.",
            "MaxValue": 128,
            "MinValue": 0.5
        },
        "SesRegion": {
            "Type": "String",
            "Default": "us-west-2",
            "AllowedValues": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ap-south-1",
                "ap-northeast-1",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-southeast-1",
                "ap-southeast-2",
                "ca-central-1",
                "eu-central-1",
                "eu-west-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "sa-east-1"
            ],
            "Description": "Amazon SES used for SMTP server. If you want to use Amazon WorkMail, need to set us-east-1, us-west-2 or eu-west-1."
        },
        "EnableWorkMail": {
            "Type": "String",
            "Default": "false",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Description": "Enable test e-mail domain \"xxx.awsapps.com\" with Amazon WorkMail."
        },
        "KongTaskSize93C195E9": {
            "Type": "String",
            "Default": "medium",
            "AllowedValues": [
                "none",
                "micro",
                "small",
                "medium",
                "large",
                "xlarge",
                "2xlarge",
                "4xlarge"
            ],
            "Description": "Fargare task size"
        },
        "AuthTaskSize9895C206": {
            "Type": "String",
            "Default": "medium",
            "AllowedValues": [
                "none",
                "micro",
                "small",
                "medium",
                "large",
                "xlarge",
                "2xlarge",
                "4xlarge"
            ],
            "Description": "Fargare task size"
        },
        "AuthProvider1Name740DD3F6": {
            "Type": "String",
            "Default": "",
            "AllowedValues": [
                "",
                "APPLE",
                "AZURE",
                "BITBUCKET",
                "DISCORD",
                "FACEBOOK",
                "GITHUB",
                "GITLAB",
                "GOOGLE",
                "KEYCLOAK",
                "LINKEDIN",
                "NOTION",
                "SPOTIFY",
                "SLACK",
                "TWITCH",
                "TWITTER",
                "WORKOS"
            ],
            "Description": "External Auth Provider Name"
        },
        "AuthProvider1ClientId5614D178": {
            "Type": "String",
            "Default": "",
            "Description": "The OAuth2 Client ID registered with the external provider."
        },
        "AuthProvider1SecretAE54364F": {
            "Type": "String",
            "Default": "",
            "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
            "NoEcho": true
        },
        "AuthProvider2Name573986E5": {
            "Type": "String",
            "Default": "",
            "AllowedValues": [
                "",
                "APPLE",
                "AZURE",
                "BITBUCKET",
                "DISCORD",
                "FACEBOOK",
                "GITHUB",
                "GITLAB",
                "GOOGLE",
                "KEYCLOAK",
                "LINKEDIN",
                "NOTION",
                "SPOTIFY",
                "SLACK",
                "TWITCH",
                "TWITTER",
                "WORKOS"
            ],
            "Description": "External Auth Provider Name"
        },
        "AuthProvider2ClientIdF3685A2B": {
            "Type": "String",
            "Default": "",
            "Description": "The OAuth2 Client ID registered with the external provider."
        },
        "AuthProvider2Secret2662F55E": {
            "Type": "String",
            "Default": "",
            "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
            "NoEcho": true
        },
        "AuthProvider3NameA8A7785F": {
            "Type": "String",
            "Default": "",
            "AllowedValues": [
                "",
                "APPLE",
                "AZURE",
                "BITBUCKET",
                "DISCORD",
                "FACEBOOK",
                "GITHUB",
                "GITLAB",
                "GOOGLE",
                "KEYCLOAK",
                "LINKEDIN",
                "NOTION",
                "SPOTIFY",
                "SLACK",
                "TWITCH",
                "TWITTER",
                "WORKOS"
            ],
            "Description": "External Auth Provider Name"
        },
        "AuthProvider3ClientId8DF3C6F7": {
            "Type": "String",
            "Default": "",
            "Description": "The OAuth2 Client ID registered with the external provider."
        },
        "AuthProvider3Secret29364F33": {
            "Type": "String",
            "Default": "",
            "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
            "NoEcho": true
        },
        "RestTaskSize14E11A14": {
            "Type": "String",
            "Default": "medium",
            "AllowedValues": [
                "none",
                "micro",
                "small",
                "medium",
                "large",
                "xlarge",
                "2xlarge",
                "4xlarge"
            ],
            "Description": "Fargare task size"
        },
        "RealtimeTaskSize6077FE1F": {
            "Type": "String",
            "Default": "medium",
            "AllowedValues": [
                "none",
                "micro",
                "small",
                "medium",
                "large",
                "xlarge",
                "2xlarge",
                "4xlarge"
            ],
            "Description": "Fargare task size"
        },
        "ImgproxyTaskSize5D0DD9F6": {
            "Type": "String",
            "Default": "medium",
            "AllowedValues": [
                "none",
                "micro",
                "small",
                "medium",
                "large",
                "xlarge",
                "2xlarge",
                "4xlarge"
            ],
            "Description": "Fargare task size"
        },
        "StorageTaskSizeB82D9CFB": {
            "Type": "String",
            "Default": "medium",
            "AllowedValues": [
                "none",
                "micro",
                "small",
                "medium",
                "large",
                "xlarge",
                "2xlarge",
                "4xlarge"
            ],
            "Description": "Fargare task size"
        },
        "MetaTaskSize556D36D9": {
            "Type": "String",
            "Default": "medium",
            "AllowedValues": [
                "none",
                "micro",
                "small",
                "medium",
                "large",
                "xlarge",
                "2xlarge",
                "4xlarge"
            ],
            "Description": "Fargare task size"
        },
        "StudioBranch": {
            "Type": "String",
            "Default": "v0.23.09",
            "Description": "Branch or tag - https://github.com/supabase/supabase/tags"
        }
    },
    "Conditions": {
        "HighAvailability": {
            "Fn::Equals": [
                {
                    "Ref": "EnableHighAvailability"
                },
                "true"
            ]
        },
        "WorkMailEnabled": {
            "Fn::Equals": [
                {
                    "Ref": "EnableWorkMail"
                },
                "true"
            ]
        },
        "CdnWafDisabledF333CA7D": {
            "Fn::Equals": [
                {
                    "Ref": "WebAclArn"
                },
                ""
            ]
        },
        "KongServiceEnabled5CB62A18": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "KongTaskSize93C195E9"
                        },
                        "none"
                    ]
                }
            ]
        },
        "KongAutoScalingEnabled41DC2F80": {
            "Fn::And": [
                {
                    "Condition": "KongServiceEnabled5CB62A18"
                },
                {
                    "Condition": "HighAvailability"
                }
            ]
        },
        "AuthServiceEnabled3234D87F": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "AuthTaskSize9895C206"
                        },
                        "none"
                    ]
                }
            ]
        },
        "AuthAutoScalingEnabled0CD7354E": {
            "Fn::And": [
                {
                    "Condition": "AuthServiceEnabled3234D87F"
                },
                {
                    "Condition": "HighAvailability"
                }
            ]
        },
        "AuthProvider1Enabled983DA6B5": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "AuthProvider1Name740DD3F6"
                        },
                        ""
                    ]
                }
            ]
        },
        "AuthProvider2Enabled05B8862B": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "AuthProvider2Name573986E5"
                        },
                        ""
                    ]
                }
            ]
        },
        "AuthProvider3Enabled464D1673": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "AuthProvider3NameA8A7785F"
                        },
                        ""
                    ]
                }
            ]
        },
        "RestServiceEnabledD6F99FCE": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "RestTaskSize14E11A14"
                        },
                        "none"
                    ]
                }
            ]
        },
        "RestAutoScalingEnabled69452861": {
            "Fn::And": [
                {
                    "Condition": "RestServiceEnabledD6F99FCE"
                },
                {
                    "Condition": "HighAvailability"
                }
            ]
        },
        "RealtimeServiceEnabled18ED891C": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "RealtimeTaskSize6077FE1F"
                        },
                        "none"
                    ]
                }
            ]
        },
        "RealtimeAutoScalingEnabled7991ED3B": {
            "Fn::And": [
                {
                    "Condition": "RealtimeServiceEnabled18ED891C"
                },
                {
                    "Condition": "HighAvailability"
                }
            ]
        },
        "ImgproxyServiceEnabled64E773FC": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ImgproxyTaskSize5D0DD9F6"
                        },
                        "none"
                    ]
                }
            ]
        },
        "ImgproxyAutoScalingEnabled44E9E87F": {
            "Fn::And": [
                {
                    "Condition": "ImgproxyServiceEnabled64E773FC"
                },
                {
                    "Condition": "HighAvailability"
                }
            ]
        },
        "StorageServiceEnabled58819374": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "StorageTaskSizeB82D9CFB"
                        },
                        "none"
                    ]
                }
            ]
        },
        "StorageAutoScalingEnabled4D34646B": {
            "Fn::And": [
                {
                    "Condition": "StorageServiceEnabled58819374"
                },
                {
                    "Condition": "HighAvailability"
                }
            ]
        },
        "MetaServiceEnabled094DCF06": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "MetaTaskSize556D36D9"
                        },
                        "none"
                    ]
                }
            ]
        },
        "MetaAutoScalingEnabledCF28EDB1": {
            "Fn::And": [
                {
                    "Condition": "MetaServiceEnabled094DCF06"
                },
                {
                    "Condition": "HighAvailability"
                }
            ]
        },
        "CDKMetadataAvailable": {
            "Fn::Or": [
                {
                    "Fn::Or": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "af-south-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "ap-east-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "ap-northeast-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "ap-northeast-2"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "ap-south-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "ap-southeast-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "ap-southeast-2"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "ca-central-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "cn-north-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "cn-northwest-1"
                            ]
                        }
                    ]
                },
                {
                    "Fn::Or": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "eu-central-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "eu-north-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "eu-south-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "eu-west-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "eu-west-2"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "eu-west-3"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "me-south-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "sa-east-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "us-east-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "us-east-2"
                            ]
                        }
                    ]
                },
                {
                    "Fn::Or": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "us-west-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "us-west-2"
                            ]
                        }
                    ]
                }
            ]
        }
    },
    "Rules": {
        "CheckWorkMailRegion": {
            "RuleCondition": {
                "Fn::Equals": [
                    {
                        "Ref": "EnableWorkMail"
                    },
                    "true"
                ]
            },
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Contains": [
                            [
                                "us-east-1",
                                "us-west-2",
                                "eu-west-1"
                            ],
                            {
                                "Ref": "SesRegion"
                            }
                        ]
                    },
                    "AssertDescription": "Amazon WorkMail is supported only in us-east-1, us-west-2 or eu-west-1. Please change Amazon SES Region."
                }
            ]
        },
        "AuthProvider1CheckClientIdD806CC33": {
            "RuleCondition": {
                "Fn::Not": [
                    {
                        "Fn::Equals": [
                            {
                                "Ref": "AuthProvider1Name740DD3F6"
                            },
                            ""
                        ]
                    }
                ]
            },
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::Equals": [
                                    {
                                        "Ref": "AuthProvider1ClientId5614D178"
                                    },
                                    ""
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "Provider1 Client Id is must not null, if Provider1 is enabled as external auth provider."
                }
            ]
        },
        "AuthProvider1CheckSecretB8DB1DF7": {
            "RuleCondition": {
                "Fn::Not": [
                    {
                        "Fn::Equals": [
                            {
                                "Ref": "AuthProvider1Name740DD3F6"
                            },
                            ""
                        ]
                    }
                ]
            },
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::Equals": [
                                    {
                                        "Ref": "AuthProvider1SecretAE54364F"
                                    },
                                    ""
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "Provider1 Client Secret is must not null, if Provider1 is enabled as external auth provider."
                }
            ]
        },
        "AuthProvider2CheckClientId828196E0": {
            "RuleCondition": {
                "Fn::Not": [
                    {
                        "Fn::Equals": [
                            {
                                "Ref": "AuthProvider2Name573986E5"
                            },
                            ""
                        ]
                    }
                ]
            },
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::Equals": [
                                    {
                                        "Ref": "AuthProvider2ClientIdF3685A2B"
                                    },
                                    ""
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "Provider2 Client Id is must not null, if Provider2 is enabled as external auth provider."
                }
            ]
        },
        "AuthProvider2CheckSecret00A859BE": {
            "RuleCondition": {
                "Fn::Not": [
                    {
                        "Fn::Equals": [
                            {
                                "Ref": "AuthProvider2Name573986E5"
                            },
                            ""
                        ]
                    }
                ]
            },
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::Equals": [
                                    {
                                        "Ref": "AuthProvider2Secret2662F55E"
                                    },
                                    ""
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "Provider2 Client Secret is must not null, if Provider2 is enabled as external auth provider."
                }
            ]
        },
        "AuthProvider3CheckClientIdF7467574": {
            "RuleCondition": {
                "Fn::Not": [
                    {
                        "Fn::Equals": [
                            {
                                "Ref": "AuthProvider3NameA8A7785F"
                            },
                            ""
                        ]
                    }
                ]
            },
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::Equals": [
                                    {
                                        "Ref": "AuthProvider3ClientId8DF3C6F7"
                                    },
                                    ""
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "Provider3 Client Id is must not null, if Provider3 is enabled as external auth provider."
                }
            ]
        },
        "AuthProvider3CheckSecret2A0B7A51": {
            "RuleCondition": {
                "Fn::Not": [
                    {
                        "Fn::Equals": [
                            {
                                "Ref": "AuthProvider3NameA8A7785F"
                            },
                            ""
                        ]
                    }
                ]
            },
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::Equals": [
                                    {
                                        "Ref": "AuthProvider3Secret29364F33"
                                    },
                                    ""
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "Provider3 Client Secret is must not null, if Provider3 is enabled as external auth provider."
                }
            ]
        }
    },
    "Resources": {
        "VPCB9E5F0B4": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsHostnames": true,
                "EnableDnsSupport": true,
                "InstanceTenancy": "default",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Supabase/VPC"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/Resource"
            }
        },
        "VPCPublicSubnet1SubnetB4246D30": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.0.0/18",
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "aws-cdk:subnet-name",
                        "Value": "Public"
                    },
                    {
                        "Key": "aws-cdk:subnet-type",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": "Supabase/VPC/PublicSubnet1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PublicSubnet1/Subnet"
            }
        },
        "VPCPublicSubnet1RouteTableFEE4B781": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Supabase/VPC/PublicSubnet1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PublicSubnet1/RouteTable"
            }
        },
        "VPCPublicSubnet1RouteTableAssociation0B0896DC": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VPCPublicSubnet1RouteTableFEE4B781"
                },
                "SubnetId": {
                    "Ref": "VPCPublicSubnet1SubnetB4246D30"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PublicSubnet1/RouteTableAssociation"
            }
        },
        "VPCPublicSubnet1DefaultRoute91CEF279": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "VPCIGWB7E252D3"
                },
                "RouteTableId": {
                    "Ref": "VPCPublicSubnet1RouteTableFEE4B781"
                }
            },
            "DependsOn": [
                "VPCVPCGW99B986DC"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PublicSubnet1/DefaultRoute"
            }
        },
        "VPCPublicSubnet1EIP6AD938E8": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Supabase/VPC/PublicSubnet1"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PublicSubnet1/EIP"
            }
        },
        "VPCPublicSubnet1NATGatewayE0556630": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "VPCPublicSubnet1EIP6AD938E8",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "VPCPublicSubnet1SubnetB4246D30"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Supabase/VPC/PublicSubnet1"
                    }
                ]
            },
            "DependsOn": [
                "VPCPublicSubnet1DefaultRoute91CEF279",
                "VPCPublicSubnet1RouteTableAssociation0B0896DC"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PublicSubnet1/NATGateway"
            }
        },
        "VPCPublicSubnet2Subnet74179F39": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.64.0/18",
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "aws-cdk:subnet-name",
                        "Value": "Public"
                    },
                    {
                        "Key": "aws-cdk:subnet-type",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": "Supabase/VPC/PublicSubnet2"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PublicSubnet2/Subnet"
            }
        },
        "VPCPublicSubnet2RouteTable6F1A15F1": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Supabase/VPC/PublicSubnet2"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PublicSubnet2/RouteTable"
            }
        },
        "VPCPublicSubnet2RouteTableAssociation5A808732": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VPCPublicSubnet2RouteTable6F1A15F1"
                },
                "SubnetId": {
                    "Ref": "VPCPublicSubnet2Subnet74179F39"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PublicSubnet2/RouteTableAssociation"
            }
        },
        "VPCPublicSubnet2DefaultRouteB7481BBA": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "VPCIGWB7E252D3"
                },
                "RouteTableId": {
                    "Ref": "VPCPublicSubnet2RouteTable6F1A15F1"
                }
            },
            "DependsOn": [
                "VPCVPCGW99B986DC"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PublicSubnet2/DefaultRoute"
            }
        },
        "VPCPrivateSubnet1Subnet8BCA10E0": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.128.0/18",
                "MapPublicIpOnLaunch": false,
                "Tags": [
                    {
                        "Key": "aws-cdk:subnet-name",
                        "Value": "Private"
                    },
                    {
                        "Key": "aws-cdk:subnet-type",
                        "Value": "Private"
                    },
                    {
                        "Key": "Name",
                        "Value": "Supabase/VPC/PrivateSubnet1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PrivateSubnet1/Subnet"
            }
        },
        "VPCPrivateSubnet1RouteTableBE8A6027": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Supabase/VPC/PrivateSubnet1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PrivateSubnet1/RouteTable"
            }
        },
        "VPCPrivateSubnet1RouteTableAssociation347902D1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VPCPrivateSubnet1RouteTableBE8A6027"
                },
                "SubnetId": {
                    "Ref": "VPCPrivateSubnet1Subnet8BCA10E0"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PrivateSubnet1/RouteTableAssociation"
            }
        },
        "VPCPrivateSubnet1DefaultRouteAE1D6490": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "VPCPublicSubnet1NATGatewayE0556630"
                },
                "RouteTableId": {
                    "Ref": "VPCPrivateSubnet1RouteTableBE8A6027"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PrivateSubnet1/DefaultRoute"
            }
        },
        "VPCPrivateSubnet2SubnetCFCDAA7A": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.192.0/18",
                "MapPublicIpOnLaunch": false,
                "Tags": [
                    {
                        "Key": "aws-cdk:subnet-name",
                        "Value": "Private"
                    },
                    {
                        "Key": "aws-cdk:subnet-type",
                        "Value": "Private"
                    },
                    {
                        "Key": "Name",
                        "Value": "Supabase/VPC/PrivateSubnet2"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PrivateSubnet2/Subnet"
            }
        },
        "VPCPrivateSubnet2RouteTable0A19E10E": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Supabase/VPC/PrivateSubnet2"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PrivateSubnet2/RouteTable"
            }
        },
        "VPCPrivateSubnet2RouteTableAssociation0C73D413": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VPCPrivateSubnet2RouteTable0A19E10E"
                },
                "SubnetId": {
                    "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PrivateSubnet2/RouteTableAssociation"
            }
        },
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "VPCPublicSubnet1NATGatewayE0556630"
                },
                "RouteTableId": {
                    "Ref": "VPCPrivateSubnet2RouteTable0A19E10E"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/PrivateSubnet2/DefaultRoute"
            }
        },
        "VPCIGWB7E252D3": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Supabase/VPC"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/IGW"
            }
        },
        "VPCVPCGW99B986DC": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "VPCIGWB7E252D3"
                },
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/VPC/VPCGW"
            }
        },
        "ClusterEB0386A7": {
            "Type": "AWS::ECS::Cluster",
            "Properties": {
                "ClusterSettings": [
                    {
                        "Name": "containerInsights",
                        "Value": "disabled"
                    }
                ],
                "ServiceConnectDefaults": {
                    "Namespace": {
                        "Fn::GetAtt": [
                            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
                            "Arn"
                        ]
                    }
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Cluster/Resource"
            }
        },
        "ClusterDefaultServiceDiscoveryNamespaceC336F9B4": {
            "Type": "AWS::ServiceDiscovery::PrivateDnsNamespace",
            "Properties": {
                "Name": "supabase.internal",
                "Vpc": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Cluster/DefaultServiceDiscoveryNamespace/Resource"
            }
        },
        "Cluster3DA9CCBA": {
            "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
            "Properties": {
                "CapacityProviders": [
                    "FARGATE",
                    "FARGATE_SPOT"
                ],
                "Cluster": {
                    "Ref": "ClusterEB0386A7"
                },
                "DefaultCapacityProviderStrategy": []
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Cluster/Cluster"
            }
        },
        "DatabaseParameterGroup2A921026": {
            "Type": "AWS::RDS::DBClusterParameterGroup",
            "Properties": {
                "Description": "Parameter group for Supabase",
                "Family": "aurora-postgresql15",
                "Parameters": {
                    "rds.force_ssl": "0",
                    "shared_preload_libraries": "pg_tle, pg_stat_statements, pgaudit, pg_cron",
                    "rds.logical_replication": "1",
                    "max_slot_wal_keep_size": "1024"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/ParameterGroup/Resource"
            }
        },
        "DatabaseClusterSubnets5540150D": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Subnets for Cluster database",
                "SubnetIds": [
                    {
                        "Ref": "VPCPrivateSubnet1Subnet8BCA10E0"
                    },
                    {
                        "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/Cluster/Subnets/Default"
            }
        },
        "DatabaseClusterSecurityGroupFEF1426A": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "RDS security group",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "Allow all outbound traffic by default",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/Cluster/SecurityGroup/Resource"
            }
        },
        "DatabaseClusterSecurityGroupfromSupabaseDatabaseMigrationFunctionSecurityGroup2273CFF4IndirectPort7EBF4AAA": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseDatabaseMigrationFunctionSecurityGroup2273CFF4:{IndirectPort}",
                "FromPort": {
                    "Fn::GetAtt": [
                        "DatabaseCluster5B53A178",
                        "Endpoint.Port"
                    ]
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "DatabaseClusterSecurityGroupFEF1426A",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "DatabaseMigrationFunctionSecurityGroup279B26A2",
                        "GroupId"
                    ]
                },
                "ToPort": {
                    "Fn::GetAtt": [
                        "DatabaseCluster5B53A178",
                        "Endpoint.Port"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/Cluster/SecurityGroup/from SupabaseDatabaseMigrationFunctionSecurityGroup2273CFF4:{IndirectPort}"
            }
        },
        "DatabaseClusterSecurityGroupfromSupabaseDatabaseUserPasswordFunctionSecurityGroup71503A07IndirectPort8134897C": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseDatabaseUserPasswordFunctionSecurityGroup71503A07:{IndirectPort}",
                "FromPort": {
                    "Fn::GetAtt": [
                        "DatabaseCluster5B53A178",
                        "Endpoint.Port"
                    ]
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "DatabaseClusterSecurityGroupFEF1426A",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "DatabaseUserPasswordFunctionSecurityGroup2C5B42FB",
                        "GroupId"
                    ]
                },
                "ToPort": {
                    "Fn::GetAtt": [
                        "DatabaseCluster5B53A178",
                        "Endpoint.Port"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/Cluster/SecurityGroup/from SupabaseDatabaseUserPasswordFunctionSecurityGroup71503A07:{IndirectPort}"
            }
        },
        "DatabaseClusterSecurityGroupfromSupabaseAuthServiceSecurityGroupC0652D23IndirectPort316A82A5": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseAuthServiceSecurityGroupC0652D23:{IndirectPort}",
                "FromPort": {
                    "Fn::GetAtt": [
                        "DatabaseCluster5B53A178",
                        "Endpoint.Port"
                    ]
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "DatabaseClusterSecurityGroupFEF1426A",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "AuthServiceSecurityGroup6440464F",
                        "GroupId"
                    ]
                },
                "ToPort": {
                    "Fn::GetAtt": [
                        "DatabaseCluster5B53A178",
                        "Endpoint.Port"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/Cluster/SecurityGroup/from SupabaseAuthServiceSecurityGroupC0652D23:{IndirectPort}"
            }
        },
        "DatabaseClusterSecurityGroupfromSupabaseRestServiceSecurityGroupC3243DF3IndirectPort2D0B0423": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseRestServiceSecurityGroupC3243DF3:{IndirectPort}",
                "FromPort": {
                    "Fn::GetAtt": [
                        "DatabaseCluster5B53A178",
                        "Endpoint.Port"
                    ]
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "DatabaseClusterSecurityGroupFEF1426A",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "RestServiceSecurityGroup0BAEA949",
                        "GroupId"
                    ]
                },
                "ToPort": {
                    "Fn::GetAtt": [
                        "DatabaseCluster5B53A178",
                        "Endpoint.Port"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/Cluster/SecurityGroup/from SupabaseRestServiceSecurityGroupC3243DF3:{IndirectPort}"
            }
        },
        "DatabaseClusterSecurityGroupfromSupabaseRealtimeServiceSecurityGroup570992FEIndirectPort1FAA9E4F": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseRealtimeServiceSecurityGroup570992FE:{IndirectPort}",
                "FromPort": {
                    "Fn::GetAtt": [
                        "DatabaseCluster5B53A178",
                        "Endpoint.Port"
                    ]
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "DatabaseClusterSecurityGroupFEF1426A",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "RealtimeServiceSecurityGroup8E245E7E",
                        "GroupId"
                    ]
                },
                "ToPort": {
                    "Fn::GetAtt": [
                        "DatabaseCluster5B53A178",
                        "Endpoint.Port"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/Cluster/SecurityGroup/from SupabaseRealtimeServiceSecurityGroup570992FE:{IndirectPort}"
            }
        },
        "DatabaseClusterSecurityGroupfromSupabaseStorageServiceSecurityGroupADF822D4IndirectPort3CE1B682": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseStorageServiceSecurityGroupADF822D4:{IndirectPort}",
                "FromPort": {
                    "Fn::GetAtt": [
                        "DatabaseCluster5B53A178",
                        "Endpoint.Port"
                    ]
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "DatabaseClusterSecurityGroupFEF1426A",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "StorageServiceSecurityGroupF6280DC0",
                        "GroupId"
                    ]
                },
                "ToPort": {
                    "Fn::GetAtt": [
                        "DatabaseCluster5B53A178",
                        "Endpoint.Port"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/Cluster/SecurityGroup/from SupabaseStorageServiceSecurityGroupADF822D4:{IndirectPort}"
            }
        },
        "DatabaseClusterSecurityGroupfromSupabaseMetaServiceSecurityGroup8C22DD35IndirectPort496372C3": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseMetaServiceSecurityGroup8C22DD35:{IndirectPort}",
                "FromPort": {
                    "Fn::GetAtt": [
                        "DatabaseCluster5B53A178",
                        "Endpoint.Port"
                    ]
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "DatabaseClusterSecurityGroupFEF1426A",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "MetaServiceSecurityGroup0E39DF35",
                        "GroupId"
                    ]
                },
                "ToPort": {
                    "Fn::GetAtt": [
                        "DatabaseCluster5B53A178",
                        "Endpoint.Port"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/Cluster/SecurityGroup/from SupabaseMetaServiceSecurityGroup8C22DD35:{IndirectPort}"
            }
        },
        "SupabaseDatabaseClusterSecret2AA4A5CD3fdaad7efa858a3daf9490cf0a702aeb": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            "Generated by the CDK for stack: ",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "GenerateSecretString": {
                    "ExcludeCharacters": " %+~`#$&*()|[]{}:;<>?!'/@\"\\",
                    "GenerateStringKey": "password",
                    "PasswordLength": 30,
                    "SecretStringTemplate": "{\"username\":\"supabase_admin\"}"
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Database-supabase_admin"
                        ]
                    ]
                }
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/Cluster/Secret/Resource"
            }
        },
        "DatabaseClusterSecretAttachmentDC8466C0": {
            "Type": "AWS::SecretsManager::SecretTargetAttachment",
            "Properties": {
                "SecretId": {
                    "Ref": "SupabaseDatabaseClusterSecret2AA4A5CD3fdaad7efa858a3daf9490cf0a702aeb"
                },
                "TargetId": {
                    "Ref": "DatabaseCluster5B53A178"
                },
                "TargetType": "AWS::RDS::DBCluster"
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/Cluster/Secret/Attachment/Resource"
            }
        },
        "DatabaseCluster5B53A178": {
            "Type": "AWS::RDS::DBCluster",
            "Properties": {
                "CopyTagsToSnapshot": true,
                "DBClusterParameterGroupName": {
                    "Ref": "DatabaseParameterGroup2A921026"
                },
                "DBSubnetGroupName": {
                    "Ref": "DatabaseClusterSubnets5540150D"
                },
                "DatabaseName": "postgres",
                "Engine": "aurora-postgresql",
                "EngineVersion": "15.4",
                "MasterUserPassword": {
                    "Fn::Join": [
                        "",
                        [
                            "{{resolve:secretsmanager:",
                            {
                                "Ref": "SupabaseDatabaseClusterSecret2AA4A5CD3fdaad7efa858a3daf9490cf0a702aeb"
                            },
                            ":SecretString:password::}}"
                        ]
                    ]
                },
                "MasterUsername": "supabase_admin",
                "Port": 5432,
                "ServerlessV2ScalingConfiguration": {
                    "MaxCapacity": {
                        "Ref": "MaxACU"
                    },
                    "MinCapacity": {
                        "Ref": "MinACU"
                    }
                },
                "StorageEncrypted": true,
                "VpcSecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "DatabaseClusterSecurityGroupFEF1426A",
                            "GroupId"
                        ]
                    }
                ]
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/Cluster/Resource"
            }
        },
        "DatabaseClusterInstance1E154D1E9": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBClusterIdentifier": {
                    "Ref": "DatabaseCluster5B53A178"
                },
                "DBInstanceClass": "db.serverless",
                "Engine": "aurora-postgresql",
                "PromotionTier": 0
            },
            "DependsOn": [
                "VPCPrivateSubnet1DefaultRouteAE1D6490",
                "VPCPrivateSubnet1RouteTableAssociation347902D1",
                "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
                "VPCPrivateSubnet2RouteTableAssociation0C73D413"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/Cluster/Instance1/Resource"
            }
        },
        "DatabaseClusterInstance2D6BCD1AC": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBClusterIdentifier": {
                    "Ref": "DatabaseCluster5B53A178"
                },
                "DBInstanceClass": "db.serverless",
                "Engine": "aurora-postgresql",
                "PromotionTier": 1
            },
            "DependsOn": [
                "VPCPrivateSubnet1DefaultRouteAE1D6490",
                "VPCPrivateSubnet1RouteTableAssociation347902D1",
                "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
                "VPCPrivateSubnet2RouteTableAssociation0C73D413"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/Cluster/Instance2/Resource"
            },
            "Condition": "HighAvailability"
        },
        "DatabaseMigrationFunctionServiceRoleE25C2000": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    },
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "DependsOn": [
                "VPCPrivateSubnet1DefaultRouteAE1D6490",
                "VPCPrivateSubnet1RouteTableAssociation347902D1",
                "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
                "VPCPrivateSubnet2RouteTableAssociation0C73D413"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/MigrationFunction/ServiceRole/Resource"
            }
        },
        "DatabaseMigrationFunctionServiceRoleDefaultPolicyBAA52D03": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "DatabaseClusterSecretAttachmentDC8466C0"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "DatabaseMigrationFunctionServiceRoleDefaultPolicyBAA52D03",
                "Roles": [
                    {
                        "Ref": "DatabaseMigrationFunctionServiceRoleE25C2000"
                    }
                ]
            },
            "DependsOn": [
                "VPCPrivateSubnet1DefaultRouteAE1D6490",
                "VPCPrivateSubnet1RouteTableAssociation347902D1",
                "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
                "VPCPrivateSubnet2RouteTableAssociation0C73D413"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/MigrationFunction/ServiceRole/DefaultPolicy/Resource"
            }
        },
        "DatabaseMigrationFunctionSecurityGroup279B26A2": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Automatic security group for Lambda Function SupabaseDatabaseMigrationFunction60EA2449",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "Allow all outbound traffic by default",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "DependsOn": [
                "VPCPrivateSubnet1DefaultRouteAE1D6490",
                "VPCPrivateSubnet1RouteTableAssociation347902D1",
                "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
                "VPCPrivateSubnet2RouteTableAssociation0C73D413"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/MigrationFunction/SecurityGroup/Resource"
            }
        },
        "DatabaseMigrationFunction9CBE9EA5": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "supabase-on-aws-${AWS::Region}"
                    },
                    "S3Key": "latest/60462bc764e8693b2d4b7dedf023e7763a7c011bc319950aed1b8ce75299f6a7.zip"
                },
                "Description": "Supabase - Database migration function",
                "Environment": {
                    "Variables": {
                        "DB_SECRET_ARN": {
                            "Ref": "DatabaseClusterSecretAttachmentDC8466C0"
                        },
                        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
                    }
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "DatabaseMigrationFunctionServiceRoleE25C2000",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs20.x",
                "Timeout": 60,
                "VpcConfig": {
                    "SecurityGroupIds": [
                        {
                            "Fn::GetAtt": [
                                "DatabaseMigrationFunctionSecurityGroup279B26A2",
                                "GroupId"
                            ]
                        }
                    ],
                    "SubnetIds": [
                        {
                            "Ref": "VPCPrivateSubnet1Subnet8BCA10E0"
                        },
                        {
                            "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A"
                        }
                    ]
                }
            },
            "DependsOn": [
                "DatabaseMigrationFunctionServiceRoleDefaultPolicyBAA52D03",
                "DatabaseMigrationFunctionServiceRoleE25C2000",
                "VPCPrivateSubnet1DefaultRouteAE1D6490",
                "VPCPrivateSubnet1RouteTableAssociation347902D1",
                "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
                "VPCPrivateSubnet2RouteTableAssociation0C73D413"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/MigrationFunction/Resource",
                "aws:asset:path": "asset.60462bc764e8693b2d4b7dedf023e7763a7c011bc319950aed1b8ce75299f6a7",
                "aws:asset:is-bundled": true,
                "aws:asset:property": "Code"
            }
        },
        "DatabaseMigrationProviderframeworkonEventServiceRole5CABFD28": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/MigrationProvider/framework-onEvent/ServiceRole/Resource"
            }
        },
        "DatabaseMigrationProviderframeworkonEventServiceRoleDefaultPolicyDFB3465C": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "lambda:InvokeFunction",
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::GetAtt": [
                                        "DatabaseMigrationFunction9CBE9EA5",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::GetAtt": [
                                                    "DatabaseMigrationFunction9CBE9EA5",
                                                    "Arn"
                                                ]
                                            },
                                            ":*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "DatabaseMigrationProviderframeworkonEventServiceRoleDefaultPolicyDFB3465C",
                "Roles": [
                    {
                        "Ref": "DatabaseMigrationProviderframeworkonEventServiceRole5CABFD28"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/MigrationProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
            }
        },
        "DatabaseMigrationProviderframeworkonEvent48D76DDA": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "supabase-on-aws-${AWS::Region}"
                    },
                    "S3Key": "latest/7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip"
                },
                "Description": "AWS CDK resource provider framework - onEvent (Supabase/Database/MigrationProvider)",
                "Environment": {
                    "Variables": {
                        "USER_ON_EVENT_FUNCTION_ARN": {
                            "Fn::GetAtt": [
                                "DatabaseMigrationFunction9CBE9EA5",
                                "Arn"
                            ]
                        }
                    }
                },
                "Handler": "framework.onEvent",
                "Role": {
                    "Fn::GetAtt": [
                        "DatabaseMigrationProviderframeworkonEventServiceRole5CABFD28",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs18.x",
                "Timeout": 900
            },
            "DependsOn": [
                "DatabaseMigrationProviderframeworkonEventServiceRoleDefaultPolicyDFB3465C",
                "DatabaseMigrationProviderframeworkonEventServiceRole5CABFD28"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/MigrationProvider/framework-onEvent/Resource",
                "aws:asset:path": "asset.7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94",
                "aws:asset:is-bundled": false,
                "aws:asset:property": "Code"
            }
        },
        "DatabaseMigration993F5B9C": {
            "Type": "Custom::DatabaseMigration",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "DatabaseMigrationProviderframeworkonEvent48D76DDA",
                        "Arn"
                    ]
                },
                "Fingerprint": "530e23e559653810f5c698b9e8972b00c67564a0c393f12b9963db3d82047a45"
            },
            "DependsOn": [
                "DatabaseClusterInstance1E154D1E9"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/Migration/Default"
            }
        },
        "DatabaseUserPasswordFunctionServiceRoleD208DCC1": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    },
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "DependsOn": [
                "VPCPrivateSubnet1DefaultRouteAE1D6490",
                "VPCPrivateSubnet1RouteTableAssociation347902D1",
                "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
                "VPCPrivateSubnet2RouteTableAssociation0C73D413"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/UserPasswordFunction/ServiceRole/Resource"
            }
        },
        "DatabaseUserPasswordFunctionServiceRoleDefaultPolicy8E1C300C": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:PutSecretValue"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:secretsmanager:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":secret:",
                                        {
                                            "Ref": "AWS::StackName"
                                        },
                                        "-Database-*"
                                    ]
                                ]
                            }
                        },
                        {
                            "NotAction": "secretsmanager:PutSecretValue",
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "DatabaseClusterSecretAttachmentDC8466C0"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "DatabaseUserPasswordFunctionServiceRoleDefaultPolicy8E1C300C",
                "Roles": [
                    {
                        "Ref": "DatabaseUserPasswordFunctionServiceRoleD208DCC1"
                    }
                ]
            },
            "DependsOn": [
                "VPCPrivateSubnet1DefaultRouteAE1D6490",
                "VPCPrivateSubnet1RouteTableAssociation347902D1",
                "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
                "VPCPrivateSubnet2RouteTableAssociation0C73D413"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/UserPasswordFunction/ServiceRole/DefaultPolicy/Resource"
            }
        },
        "DatabaseUserPasswordFunctionSecurityGroup2C5B42FB": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Automatic security group for Lambda Function SupabaseDatabaseUserPasswordFunction2F544B74",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "Allow all outbound traffic by default",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "DependsOn": [
                "VPCPrivateSubnet1DefaultRouteAE1D6490",
                "VPCPrivateSubnet1RouteTableAssociation347902D1",
                "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
                "VPCPrivateSubnet2RouteTableAssociation0C73D413"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/UserPasswordFunction/SecurityGroup/Resource"
            }
        },
        "DatabaseUserPasswordFunctionAFAC7436": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "supabase-on-aws-${AWS::Region}"
                    },
                    "S3Key": "latest/9f9174dec158d89dd5bd125a21d30b9b3e198dc7291551f8793ce3d1fa23f29d.zip"
                },
                "Description": "Supabase - DB user password function",
                "Environment": {
                    "Variables": {
                        "DB_SECRET_ARN": {
                            "Ref": "DatabaseClusterSecretAttachmentDC8466C0"
                        },
                        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
                    }
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "DatabaseUserPasswordFunctionServiceRoleD208DCC1",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs20.x",
                "Timeout": 10,
                "VpcConfig": {
                    "SecurityGroupIds": [
                        {
                            "Fn::GetAtt": [
                                "DatabaseUserPasswordFunctionSecurityGroup2C5B42FB",
                                "GroupId"
                            ]
                        }
                    ],
                    "SubnetIds": [
                        {
                            "Ref": "VPCPrivateSubnet1Subnet8BCA10E0"
                        },
                        {
                            "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A"
                        }
                    ]
                }
            },
            "DependsOn": [
                "DatabaseUserPasswordFunctionServiceRoleDefaultPolicy8E1C300C",
                "DatabaseUserPasswordFunctionServiceRoleD208DCC1",
                "VPCPrivateSubnet1DefaultRouteAE1D6490",
                "VPCPrivateSubnet1RouteTableAssociation347902D1",
                "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
                "VPCPrivateSubnet2RouteTableAssociation0C73D413"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/UserPasswordFunction/Resource",
                "aws:asset:path": "asset.9f9174dec158d89dd5bd125a21d30b9b3e198dc7291551f8793ce3d1fa23f29d",
                "aws:asset:is-bundled": true,
                "aws:asset:property": "Code"
            }
        },
        "DatabaseUserPasswordProviderframeworkonEventServiceRole6ABBAA88": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/UserPasswordProvider/framework-onEvent/ServiceRole/Resource"
            }
        },
        "DatabaseUserPasswordProviderframeworkonEventServiceRoleDefaultPolicyAA1280B0": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "lambda:InvokeFunction",
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::GetAtt": [
                                        "DatabaseUserPasswordFunctionAFAC7436",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::GetAtt": [
                                                    "DatabaseUserPasswordFunctionAFAC7436",
                                                    "Arn"
                                                ]
                                            },
                                            ":*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "DatabaseUserPasswordProviderframeworkonEventServiceRoleDefaultPolicyAA1280B0",
                "Roles": [
                    {
                        "Ref": "DatabaseUserPasswordProviderframeworkonEventServiceRole6ABBAA88"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/UserPasswordProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
            }
        },
        "DatabaseUserPasswordProviderframeworkonEventB02AAC24": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "supabase-on-aws-${AWS::Region}"
                    },
                    "S3Key": "latest/7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip"
                },
                "Description": "AWS CDK resource provider framework - onEvent (Supabase/Database/UserPasswordProvider)",
                "Environment": {
                    "Variables": {
                        "USER_ON_EVENT_FUNCTION_ARN": {
                            "Fn::GetAtt": [
                                "DatabaseUserPasswordFunctionAFAC7436",
                                "Arn"
                            ]
                        }
                    }
                },
                "Handler": "framework.onEvent",
                "Role": {
                    "Fn::GetAtt": [
                        "DatabaseUserPasswordProviderframeworkonEventServiceRole6ABBAA88",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs18.x",
                "Timeout": 900
            },
            "DependsOn": [
                "DatabaseUserPasswordProviderframeworkonEventServiceRoleDefaultPolicyAA1280B0",
                "DatabaseUserPasswordProviderframeworkonEventServiceRole6ABBAA88"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/UserPasswordProvider/framework-onEvent/Resource",
                "aws:asset:path": "asset.7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94",
                "aws:asset:is-bundled": false,
                "aws:asset:property": "Code"
            }
        },
        "DatabasesupabaseauthadminSecretC3287578": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
                "Description": "Supabase - Database User supabase_auth_admin",
                "GenerateSecretString": {
                    "ExcludePunctuation": true,
                    "GenerateStringKey": "password",
                    "SecretStringTemplate": "{\"username\":\"supabase_auth_admin\"}"
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Database-supabase_auth_admin"
                        ]
                    ]
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/supabase_auth_admin/Secret/Resource"
            }
        },
        "DatabasesupabaseauthadminF9154F88": {
            "Type": "Custom::DatabaseUserPassword",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "DatabaseUserPasswordProviderframeworkonEventB02AAC24",
                        "Arn"
                    ]
                },
                "Username": "supabase_auth_admin",
                "SecretId": {
                    "Ref": "DatabasesupabaseauthadminSecretC3287578"
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/supabase_auth_admin/Resource/Default"
            }
        },
        "DatabasesupabasestorageadminSecret88C76AA3": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
                "Description": "Supabase - Database User supabase_storage_admin",
                "GenerateSecretString": {
                    "ExcludePunctuation": true,
                    "GenerateStringKey": "password",
                    "SecretStringTemplate": "{\"username\":\"supabase_storage_admin\"}"
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Database-supabase_storage_admin"
                        ]
                    ]
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/supabase_storage_admin/Secret/Resource"
            }
        },
        "DatabasesupabasestorageadminA3D9AA2C": {
            "Type": "Custom::DatabaseUserPassword",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "DatabaseUserPasswordProviderframeworkonEventB02AAC24",
                        "Arn"
                    ]
                },
                "Username": "supabase_storage_admin",
                "SecretId": {
                    "Ref": "DatabasesupabasestorageadminSecret88C76AA3"
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/supabase_storage_admin/Resource/Default"
            }
        },
        "DatabaseauthenticatorSecret69FA14DE": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
                "Description": "Supabase - Database User authenticator",
                "GenerateSecretString": {
                    "ExcludePunctuation": true,
                    "GenerateStringKey": "password",
                    "SecretStringTemplate": "{\"username\":\"authenticator\"}"
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Database-authenticator"
                        ]
                    ]
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/authenticator/Secret/Resource"
            }
        },
        "Databaseauthenticator35B4E8E9": {
            "Type": "Custom::DatabaseUserPassword",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "DatabaseUserPasswordProviderframeworkonEventB02AAC24",
                        "Arn"
                    ]
                },
                "Username": "authenticator",
                "SecretId": {
                    "Ref": "DatabaseauthenticatorSecret69FA14DE"
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/authenticator/Resource/Default"
            }
        },
        "DatabasedashboarduserSecret102D2F3B": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
                "Description": "Supabase - Database User dashboard_user",
                "GenerateSecretString": {
                    "ExcludePunctuation": true,
                    "GenerateStringKey": "password",
                    "SecretStringTemplate": "{\"username\":\"dashboard_user\"}"
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Database-dashboard_user"
                        ]
                    ]
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/dashboard_user/Secret/Resource"
            }
        },
        "DatabasedashboarduserBEF03EEC": {
            "Type": "Custom::DatabaseUserPassword",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "DatabaseUserPasswordProviderframeworkonEventB02AAC24",
                        "Arn"
                    ]
                },
                "Username": "dashboard_user",
                "SecretId": {
                    "Ref": "DatabasedashboarduserSecret102D2F3B"
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/dashboard_user/Resource/Default"
            }
        },
        "DatabasepostgresSecret8E64AF98": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
                "Description": "Supabase - Database User postgres",
                "GenerateSecretString": {
                    "ExcludePunctuation": true,
                    "GenerateStringKey": "password",
                    "SecretStringTemplate": "{\"username\":\"postgres\"}"
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Database-postgres"
                        ]
                    ]
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/postgres/Secret/Resource"
            }
        },
        "DatabasepostgresDCE7DA96": {
            "Type": "Custom::DatabaseUserPassword",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "DatabaseUserPasswordProviderframeworkonEventB02AAC24",
                        "Arn"
                    ]
                },
                "Username": "postgres",
                "SecretId": {
                    "Ref": "DatabasepostgresSecret8E64AF98"
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Database/postgres/Resource/Default"
            }
        },
        "SmtpSendEmailPolicyCCA0AA9B": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "ses:SendRawEmail",
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "SmtpSendEmailPolicyCCA0AA9B",
                "Users": [
                    {
                        "Ref": "SmtpUser4973DF55"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Smtp/SendEmailPolicy/Resource"
            }
        },
        "SmtpUser4973DF55": {
            "Type": "AWS::IAM::User",
            "Metadata": {
                "aws:cdk:path": "Supabase/Smtp/User/Resource"
            }
        },
        "SmtpAccessKeyCCAD8B7D": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": {
                    "Ref": "SmtpUser4973DF55"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Smtp/AccessKey"
            }
        },
        "SmtpPasswordFunctionServiceRoleA0A9C3A3": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Smtp/PasswordFunction/ServiceRole/Resource"
            }
        },
        "SmtpPasswordFunctionDC49B7CC": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "supabase-on-aws-${AWS::Region}"
                    },
                    "S3Key": "latest/cbb9c0c24fa0ee781b61f07de9aab9f7fbd9d5fec8eed79f7c53870781adaf38.zip"
                },
                "Description": "Supabase - Generate SMTP Password Function",
                "Environment": {
                    "Variables": {
                        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
                    }
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "SmtpPasswordFunctionServiceRoleA0A9C3A3",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs20.x"
            },
            "DependsOn": [
                "SmtpPasswordFunctionServiceRoleA0A9C3A3"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Smtp/PasswordFunction/Resource",
                "aws:asset:path": "asset.cbb9c0c24fa0ee781b61f07de9aab9f7fbd9d5fec8eed79f7c53870781adaf38",
                "aws:asset:is-bundled": true,
                "aws:asset:property": "Code"
            }
        },
        "SmtpPasswordProviderframeworkonEventServiceRoleF0717454": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Smtp/PasswordProvider/framework-onEvent/ServiceRole/Resource"
            }
        },
        "SmtpPasswordProviderframeworkonEventServiceRoleDefaultPolicyD17BD380": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "lambda:InvokeFunction",
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::GetAtt": [
                                        "SmtpPasswordFunctionDC49B7CC",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::GetAtt": [
                                                    "SmtpPasswordFunctionDC49B7CC",
                                                    "Arn"
                                                ]
                                            },
                                            ":*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "SmtpPasswordProviderframeworkonEventServiceRoleDefaultPolicyD17BD380",
                "Roles": [
                    {
                        "Ref": "SmtpPasswordProviderframeworkonEventServiceRoleF0717454"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Smtp/PasswordProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
            }
        },
        "SmtpPasswordProviderframeworkonEvent430EB845": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "supabase-on-aws-${AWS::Region}"
                    },
                    "S3Key": "latest/7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip"
                },
                "Description": "AWS CDK resource provider framework - onEvent (Supabase/Smtp/PasswordProvider)",
                "Environment": {
                    "Variables": {
                        "USER_ON_EVENT_FUNCTION_ARN": {
                            "Fn::GetAtt": [
                                "SmtpPasswordFunctionDC49B7CC",
                                "Arn"
                            ]
                        }
                    }
                },
                "Handler": "framework.onEvent",
                "Role": {
                    "Fn::GetAtt": [
                        "SmtpPasswordProviderframeworkonEventServiceRoleF0717454",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs18.x",
                "Timeout": 900
            },
            "DependsOn": [
                "SmtpPasswordProviderframeworkonEventServiceRoleDefaultPolicyD17BD380",
                "SmtpPasswordProviderframeworkonEventServiceRoleF0717454"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Smtp/PasswordProvider/framework-onEvent/Resource",
                "aws:asset:path": "asset.7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94",
                "aws:asset:is-bundled": false,
                "aws:asset:property": "Code"
            }
        },
        "SmtpPasswordBA01E518": {
            "Type": "Custom::Password",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "SmtpPasswordProviderframeworkonEvent430EB845",
                        "Arn"
                    ]
                },
                "Region": {
                    "Ref": "SesRegion"
                },
                "SecretAccessKey": {
                    "Fn::GetAtt": [
                        "SmtpAccessKeyCCAD8B7D",
                        "SecretAccessKey"
                    ]
                }
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Smtp/Password/Default"
            }
        },
        "SmtpWorkMailNestedStackWorkMailNestedStackResource042ECB25": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "referencetoSupabaseSesRegion184A3193Ref": {
                        "Ref": "SesRegion"
                    },
                    "referencetoSupabaseSmtpPassword76B56B34Password": {
                        "Fn::GetAtt": [
                            "SmtpPasswordBA01E518",
                            "Password"
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Join": [
                        "",
                        [
                            "https://s3.",
                            {
                                "Ref": "AWS::Region"
                            },
                            ".",
                            {
                                "Ref": "AWS::URLSuffix"
                            },
                            "/",
                            {
                                "Fn::Sub": "supabase-on-aws-${AWS::Region}"
                            },
                            "/latest/8165bfe330030b12950c6754d4b2f991c36ba38f74addbc3ab647af77b60637c"
                        ]
                    ]
                }
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Smtp/WorkMail.NestedStack/WorkMail.NestedStackResource",
                "aws:asset:path": "SupabaseSmtpWorkMail7E03B8AB.nested.template.json",
                "aws:asset:property": "TemplateURL"
            },
            "Condition": "WorkMailEnabled"
        },
        "SmtpSecretF89CC16B": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
                "Description": "Supabase - SMTP Secret",
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "SmtpSecret"
                        ]
                    ]
                },
                "SecretString": {
                    "Fn::Join": [
                        "",
                        [
                            "{\"username\":\"",
                            {
                                "Fn::If": [
                                    "WorkMailEnabled",
                                    {
                                        "Fn::GetAtt": [
                                            "SmtpWorkMailNestedStackWorkMailNestedStackResource042ECB25",
                                            "Outputs.SupabaseSmtpWorkMailOrganizationSupabaseBD859A4AEmail"
                                        ]
                                    },
                                    {
                                        "Ref": "SmtpAccessKeyCCAD8B7D"
                                    }
                                ]
                            },
                            "\",\"password\":\"",
                            {
                                "Fn::GetAtt": [
                                    "SmtpPasswordBA01E518",
                                    "Password"
                                ]
                            },
                            "\",\"host\":\"",
                            {
                                "Fn::If": [
                                    "WorkMailEnabled",
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "smtp.mail.",
                                                {
                                                    "Ref": "SesRegion"
                                                },
                                                ".awsapps.com"
                                            ]
                                        ]
                                    },
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "email-smtp.",
                                                {
                                                    "Ref": "SesRegion"
                                                },
                                                ".amazonaws.com"
                                            ]
                                        ]
                                    }
                                ]
                            },
                            "\"}"
                        ]
                    ]
                }
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Smtp/Secret/Resource"
            }
        },
        "JwtSecretB8834B39": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            " - Json Web Token Secret"
                        ]
                    ]
                },
                "GenerateSecretString": {
                    "ExcludePunctuation": true,
                    "PasswordLength": 64
                }
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/JwtSecret/Resource"
            }
        },
        "JwtSecretJsonWebTokenFunctionServiceRole17CF8128": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/JwtSecret/JsonWebTokenFunction/ServiceRole/Resource"
            }
        },
        "JwtSecretJsonWebTokenFunctionServiceRoleDefaultPolicyFEC3E7BA": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "JwtSecretB8834B39"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "JwtSecretJsonWebTokenFunctionServiceRoleDefaultPolicyFEC3E7BA",
                "Roles": [
                    {
                        "Ref": "JwtSecretJsonWebTokenFunctionServiceRole17CF8128"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/JwtSecret/JsonWebTokenFunction/ServiceRole/DefaultPolicy/Resource"
            }
        },
        "JwtSecretJsonWebTokenFunctionF8BA9D2A": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "supabase-on-aws-${AWS::Region}"
                    },
                    "S3Key": "latest/baf945a52f8e02b1131009f27d8b23a50b9eacc020ff363093145c8e6f5dbc01.zip"
                },
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            " - Generate token via jwt secret"
                        ]
                    ]
                },
                "Environment": {
                    "Variables": {
                        "JWT_SECRET_ARN": {
                            "Ref": "JwtSecretB8834B39"
                        },
                        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
                    }
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "JwtSecretJsonWebTokenFunctionServiceRole17CF8128",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs20.x"
            },
            "DependsOn": [
                "JwtSecretJsonWebTokenFunctionServiceRoleDefaultPolicyFEC3E7BA",
                "JwtSecretJsonWebTokenFunctionServiceRole17CF8128"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/JwtSecret/JsonWebTokenFunction/Resource",
                "aws:asset:path": "asset.baf945a52f8e02b1131009f27d8b23a50b9eacc020ff363093145c8e6f5dbc01",
                "aws:asset:is-bundled": true,
                "aws:asset:property": "Code"
            }
        },
        "JwtSecretGenerateTokenProviderframeworkonEventServiceRoleD6B5B68A": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/JwtSecret/GenerateTokenProvider/framework-onEvent/ServiceRole/Resource"
            }
        },
        "JwtSecretGenerateTokenProviderframeworkonEventServiceRoleDefaultPolicy14F466A4": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "lambda:InvokeFunction",
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::GetAtt": [
                                        "JwtSecretJsonWebTokenFunctionF8BA9D2A",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::GetAtt": [
                                                    "JwtSecretJsonWebTokenFunctionF8BA9D2A",
                                                    "Arn"
                                                ]
                                            },
                                            ":*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "JwtSecretGenerateTokenProviderframeworkonEventServiceRoleDefaultPolicy14F466A4",
                "Roles": [
                    {
                        "Ref": "JwtSecretGenerateTokenProviderframeworkonEventServiceRoleD6B5B68A"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/JwtSecret/GenerateTokenProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
            }
        },
        "JwtSecretGenerateTokenProviderframeworkonEvent34DD1AAA": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "supabase-on-aws-${AWS::Region}"
                    },
                    "S3Key": "latest/7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip"
                },
                "Description": "AWS CDK resource provider framework - onEvent (Supabase/JwtSecret/GenerateTokenProvider)",
                "Environment": {
                    "Variables": {
                        "USER_ON_EVENT_FUNCTION_ARN": {
                            "Fn::GetAtt": [
                                "JwtSecretJsonWebTokenFunctionF8BA9D2A",
                                "Arn"
                            ]
                        }
                    }
                },
                "Handler": "framework.onEvent",
                "Role": {
                    "Fn::GetAtt": [
                        "JwtSecretGenerateTokenProviderframeworkonEventServiceRoleD6B5B68A",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs18.x",
                "Timeout": 900
            },
            "DependsOn": [
                "JwtSecretGenerateTokenProviderframeworkonEventServiceRoleDefaultPolicy14F466A4",
                "JwtSecretGenerateTokenProviderframeworkonEventServiceRoleD6B5B68A"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/JwtSecret/GenerateTokenProvider/framework-onEvent/Resource",
                "aws:asset:path": "asset.7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94",
                "aws:asset:is-bundled": false,
                "aws:asset:property": "Code"
            }
        },
        "JwtSecretAnonKey63F37A1E": {
            "Type": "Custom::JsonWebToken",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "JwtSecretGenerateTokenProviderframeworkonEvent34DD1AAA",
                        "Arn"
                    ]
                },
                "Payload": {
                    "role": "anon"
                },
                "Issuer": "supabase",
                "ExpiresIn": "10y"
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/JwtSecret/AnonKey/Resource/Default"
            }
        },
        "JwtSecretAnonKeyParameter532DCC06": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            " - Json Web Token, role: anon"
                        ]
                    ]
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            "/",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "/JwtSecret/AnonKey"
                        ]
                    ]
                },
                "Type": "String",
                "Value": {
                    "Fn::GetAtt": [
                        "JwtSecretAnonKey63F37A1E",
                        "Value"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/JwtSecret/AnonKey/Parameter/Resource"
            }
        },
        "JwtSecretServiceRoleKeyF0F6C193": {
            "Type": "Custom::JsonWebToken",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "JwtSecretGenerateTokenProviderframeworkonEvent34DD1AAA",
                        "Arn"
                    ]
                },
                "Payload": {
                    "role": "service_role"
                },
                "Issuer": "supabase",
                "ExpiresIn": "10y"
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/JwtSecret/ServiceRoleKey/Resource/Default"
            }
        },
        "JwtSecretServiceRoleKeyParameterB65536EB": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            " - Json Web Token, role: service_role"
                        ]
                    ]
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            "/",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "/JwtSecret/ServiceRoleKey"
                        ]
                    ]
                },
                "Type": "String",
                "Value": {
                    "Fn::GetAtt": [
                        "JwtSecretServiceRoleKeyF0F6C193",
                        "Value"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/JwtSecret/ServiceRoleKey/Parameter/Resource"
            }
        },
        "LoadBalancerBE9EEC3A": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "LoadBalancerAttributes": [
                    {
                        "Key": "deletion_protection.enabled",
                        "Value": "false"
                    }
                ],
                "Scheme": "internet-facing",
                "SecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "LoadBalancerSecurityGroupA28D6DD7",
                            "GroupId"
                        ]
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "VPCPublicSubnet1SubnetB4246D30"
                    },
                    {
                        "Ref": "VPCPublicSubnet2Subnet74179F39"
                    }
                ],
                "Type": "application"
            },
            "DependsOn": [
                "VPCPublicSubnet1DefaultRoute91CEF279",
                "VPCPublicSubnet1RouteTableAssociation0B0896DC",
                "VPCPublicSubnet2DefaultRouteB7481BBA",
                "VPCPublicSubnet2RouteTableAssociation5A808732"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/LoadBalancer/Resource"
            }
        },
        "LoadBalancerSecurityGroupA28D6DD7": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Automatically created Security Group for ELB SupabaseLoadBalancer630C0AFC",
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/LoadBalancer/SecurityGroup/Resource"
            }
        },
        "LoadBalancerSecurityGroupfromIndirectPeer80AB4C6575": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "CloudFront",
                "FromPort": 80,
                "GroupId": {
                    "Fn::GetAtt": [
                        "LoadBalancerSecurityGroupA28D6DD7",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourcePrefixListId": {
                    "Fn::GetAtt": [
                        "CloudFrontPrefixList22014EFD",
                        "PrefixLists.0.PrefixListId"
                    ]
                },
                "ToPort": 80
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/LoadBalancer/SecurityGroup/from {IndirectPeer}:80"
            }
        },
        "LoadBalancerSecurityGrouptoSupabaseKongServiceSecurityGroupB3C4AC8F800011C84C57": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "Description": "Load balancer to target",
                "DestinationSecurityGroupId": {
                    "Fn::GetAtt": [
                        "KongServiceSecurityGroupE199EE6C",
                        "GroupId"
                    ]
                },
                "FromPort": 8000,
                "GroupId": {
                    "Fn::GetAtt": [
                        "LoadBalancerSecurityGroupA28D6DD7",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "ToPort": 8000
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/LoadBalancer/SecurityGroup/to SupabaseKongServiceSecurityGroupB3C4AC8F:8000"
            }
        },
        "LoadBalancerSecurityGrouptoSupabaseKongServiceSecurityGroupB3C4AC8F8100711401B1": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "Description": "ALB healthcheck",
                "DestinationSecurityGroupId": {
                    "Fn::GetAtt": [
                        "KongServiceSecurityGroupE199EE6C",
                        "GroupId"
                    ]
                },
                "FromPort": 8100,
                "GroupId": {
                    "Fn::GetAtt": [
                        "LoadBalancerSecurityGroupA28D6DD7",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "ToPort": 8100
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/LoadBalancer/SecurityGroup/to SupabaseKongServiceSecurityGroupB3C4AC8F:8100"
            }
        },
        "LoadBalancerListenerE1A099B9": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "TargetGroupArn": {
                            "Ref": "KongTargetGroupD0277B2A"
                        },
                        "Type": "forward"
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "LoadBalancerBE9EEC3A"
                },
                "Port": 80,
                "Protocol": "HTTP"
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/LoadBalancer/Listener/Resource"
            }
        },
        "CloudFrontPrefixList22014EFD": {
            "Type": "Custom::PrefixList",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
                        "Arn"
                    ]
                },
                "Create": "{\"service\":\"EC2\",\"action\":\"describeManagedPrefixLists\",\"parameters\":{\"Filters\":[{\"Name\":\"prefix-list-name\",\"Values\":[\"com.amazonaws.global.cloudfront.origin-facing\"]}]},\"physicalResourceId\":{\"responsePath\":\"PrefixLists.0.PrefixListId\"}}",
                "InstallLatestAwsSdk": true
            },
            "DependsOn": [
                "CloudFrontPrefixListCustomResourcePolicyB6BABDE5"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/CloudFrontPrefixList/Resource/Default"
            }
        },
        "CloudFrontPrefixListCustomResourcePolicyB6BABDE5": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "ec2:DescribeManagedPrefixLists",
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "CloudFrontPrefixListCustomResourcePolicyB6BABDE5",
                "Roles": [
                    {
                        "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/CloudFrontPrefixList/CustomResourcePolicy/Resource"
            }
        },
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/AWS679f53fac002430cb0da5b7982bd2287/ServiceRole/Resource"
            }
        },
        "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "supabase-on-aws-${AWS::Region}"
                    },
                    "S3Key": "latest/17c16a3854838fd3ff4bda08146122a6701f33b9c86ae17f415ad0dc47a97544.zip"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs18.x",
                "Timeout": 120
            },
            "DependsOn": [
                "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/AWS679f53fac002430cb0da5b7982bd2287/Resource",
                "aws:asset:path": "asset.17c16a3854838fd3ff4bda08146122a6701f33b9c86ae17f415ad0dc47a97544",
                "aws:asset:is-bundled": false,
                "aws:asset:property": "Code"
            }
        },
        "CdnCachePolicy957D7474": {
            "Type": "AWS::CloudFront::CachePolicy",
            "Properties": {
                "CachePolicyConfig": {
                    "Comment": "Policy for Supabase API",
                    "DefaultTTL": 1,
                    "MaxTTL": 600,
                    "MinTTL": 0,
                    "Name": {
                        "Fn::Join": [
                            "",
                            [
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "-CachePolicy-",
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "ParametersInCacheKeyAndForwardedToOrigin": {
                        "CookiesConfig": {
                            "CookieBehavior": "none"
                        },
                        "EnableAcceptEncodingBrotli": true,
                        "EnableAcceptEncodingGzip": true,
                        "HeadersConfig": {
                            "HeaderBehavior": "whitelist",
                            "Headers": [
                                "apikey",
                                "authorization",
                                "host"
                            ]
                        },
                        "QueryStringsConfig": {
                            "QueryStringBehavior": "all"
                        }
                    }
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Cdn/CachePolicy/Resource"
            }
        },
        "CdnResponseHeadersPolicy36E4B823": {
            "Type": "AWS::CloudFront::ResponseHeadersPolicy",
            "Properties": {
                "ResponseHeadersPolicyConfig": {
                    "Comment": "Policy for Supabase API",
                    "CustomHeadersConfig": {
                        "Items": [
                            {
                                "Header": "server",
                                "Override": true,
                                "Value": "cloudfront"
                            }
                        ]
                    },
                    "Name": {
                        "Fn::Join": [
                            "",
                            [
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "-ResponseHeadersPolicy-",
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    }
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Cdn/ResponseHeadersPolicy/Resource"
            }
        },
        "CdnDistribution149FA6C8": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
                "DistributionConfig": {
                    "CacheBehaviors": [
                        {
                            "AllowedMethods": [
                                "GET",
                                "HEAD"
                            ],
                            "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
                            "Compress": true,
                            "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
                            "PathPattern": "storage/v1/object/public/*",
                            "ResponseHeadersPolicyId": {
                                "Ref": "CdnResponseHeadersPolicy36E4B823"
                            },
                            "TargetOriginId": "SupabaseCdnDistributionOrigin1C1F18041",
                            "ViewerProtocolPolicy": "redirect-to-https"
                        }
                    ],
                    "Comment": "Supabase - CDN (Supabase/Cdn/Distribution)",
                    "CustomErrorResponses": [
                        {
                            "ErrorCachingMinTTL": 10,
                            "ErrorCode": 500
                        },
                        {
                            "ErrorCachingMinTTL": 10,
                            "ErrorCode": 501
                        },
                        {
                            "ErrorCachingMinTTL": 10,
                            "ErrorCode": 502
                        },
                        {
                            "ErrorCachingMinTTL": 10,
                            "ErrorCode": 503
                        },
                        {
                            "ErrorCachingMinTTL": 10,
                            "ErrorCode": 504
                        }
                    ],
                    "DefaultCacheBehavior": {
                        "AllowedMethods": [
                            "GET",
                            "HEAD",
                            "OPTIONS",
                            "PUT",
                            "PATCH",
                            "POST",
                            "DELETE"
                        ],
                        "CachePolicyId": {
                            "Ref": "CdnCachePolicy957D7474"
                        },
                        "Compress": true,
                        "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
                        "ResponseHeadersPolicyId": {
                            "Ref": "CdnResponseHeadersPolicy36E4B823"
                        },
                        "TargetOriginId": "SupabaseCdnDistributionOrigin1C1F18041",
                        "ViewerProtocolPolicy": "redirect-to-https"
                    },
                    "Enabled": true,
                    "HttpVersion": "http2and3",
                    "IPV6Enabled": true,
                    "Origins": [
                        {
                            "CustomOriginConfig": {
                                "OriginProtocolPolicy": "http-only",
                                "OriginSSLProtocols": [
                                    "TLSv1.2"
                                ]
                            },
                            "DomainName": {
                                "Fn::GetAtt": [
                                    "LoadBalancerBE9EEC3A",
                                    "DNSName"
                                ]
                            },
                            "Id": "SupabaseCdnDistributionOrigin1C1F18041"
                        }
                    ],
                    "WebACLId": {
                        "Fn::If": [
                            "CdnWafDisabledF333CA7D",
                            {
                                "Ref": "AWS::NoValue"
                            },
                            {
                                "Ref": "WebAclArn"
                            }
                        ]
                    }
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Cdn/Distribution/Resource"
            }
        },
        "CdnCacheManagerApiKey137D2795": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
                "Description": "Supabase - API key for CDN cache manager",
                "GenerateSecretString": {
                    "ExcludePunctuation": true
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-CDN-CacheManager-ApiKey"
                        ]
                    ]
                }
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Cdn/CacheManager/ApiKey/Resource"
            }
        },
        "CdnCacheManagerQueue786D7FA2": {
            "Type": "AWS::SQS::Queue",
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Cdn/CacheManager/Queue/Resource"
            }
        },
        "CdnCacheManagerApiFunctionServiceRoleA4D8F8DB": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Cdn/CacheManager/ApiFunction/ServiceRole/Resource"
            }
        },
        "CdnCacheManagerApiFunctionServiceRoleDefaultPolicy74947A18": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "xray:PutTraceSegments",
                                "xray:PutTelemetryRecords"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "sqs:SendMessage",
                                "sqs:GetQueueAttributes",
                                "sqs:GetQueueUrl"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "CdnCacheManagerQueue786D7FA2",
                                    "Arn"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "CdnCacheManagerApiFunctionServiceRoleDefaultPolicy74947A18",
                "Roles": [
                    {
                        "Ref": "CdnCacheManagerApiFunctionServiceRoleA4D8F8DB"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Cdn/CacheManager/ApiFunction/ServiceRole/DefaultPolicy/Resource"
            }
        },
        "CdnCacheManagerApiFunction8F3CC846": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Architectures": [
                    "arm64"
                ],
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "supabase-on-aws-${AWS::Region}"
                    },
                    "S3Key": "latest/8a91672f58486c885aa9527e06ea94ef8dcbadc65b50e3e6eff95ea5f50fb0ae.zip"
                },
                "Description": "Supabase/Cdn/CacheManager/ApiFunction",
                "Environment": {
                    "Variables": {
                        "QUEUE_URL": {
                            "Ref": "CdnCacheManagerQueue786D7FA2"
                        },
                        "API_KEY": {
                            "Fn::Join": [
                                "",
                                [
                                    "{{resolve:secretsmanager:",
                                    {
                                        "Ref": "CdnCacheManagerApiKey137D2795"
                                    },
                                    ":SecretString:::}}"
                                ]
                            ]
                        },
                        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
                    }
                },
                "Handler": "index.handler",
                "Layers": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:lambda:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":094274105915:layer:AWSLambdaPowertoolsTypeScript:25"
                            ]
                        ]
                    }
                ],
                "Role": {
                    "Fn::GetAtt": [
                        "CdnCacheManagerApiFunctionServiceRoleA4D8F8DB",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs20.x",
                "TracingConfig": {
                    "Mode": "Active"
                }
            },
            "DependsOn": [
                "CdnCacheManagerApiFunctionServiceRoleDefaultPolicy74947A18",
                "CdnCacheManagerApiFunctionServiceRoleA4D8F8DB"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Cdn/CacheManager/ApiFunction/Resource",
                "aws:asset:path": "asset.8a91672f58486c885aa9527e06ea94ef8dcbadc65b50e3e6eff95ea5f50fb0ae",
                "aws:asset:is-bundled": true,
                "aws:asset:property": "Code"
            }
        },
        "CdnCacheManagerApiFunctionFunctionUrl37928FC6": {
            "Type": "AWS::Lambda::Url",
            "Properties": {
                "AuthType": "NONE",
                "TargetFunctionArn": {
                    "Fn::GetAtt": [
                        "CdnCacheManagerApiFunction8F3CC846",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Cdn/CacheManager/ApiFunction/FunctionUrl/Resource"
            }
        },
        "CdnCacheManagerApiFunctioninvokefunctionurl25D0AB1E": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunctionUrl",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "CdnCacheManagerApiFunction8F3CC846",
                        "Arn"
                    ]
                },
                "FunctionUrlAuthType": "NONE",
                "Principal": "*"
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Cdn/CacheManager/ApiFunction/invoke-function-url"
            }
        },
        "CdnCacheManagerQueueConsumerServiceRole273BAAFA": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Cdn/CacheManager/QueueConsumer/ServiceRole/Resource"
            }
        },
        "CdnCacheManagerQueueConsumerServiceRoleDefaultPolicy2DE8002E": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "cloudfront:CreateInvalidation",
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:cloudfront::",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":distribution/",
                                        {
                                            "Ref": "CdnDistribution149FA6C8"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            "Action": [
                                "xray:PutTraceSegments",
                                "xray:PutTelemetryRecords"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "sqs:ReceiveMessage",
                                "sqs:ChangeMessageVisibility",
                                "sqs:GetQueueUrl",
                                "sqs:DeleteMessage",
                                "sqs:GetQueueAttributes"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "CdnCacheManagerQueue786D7FA2",
                                    "Arn"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "CdnCacheManagerQueueConsumerServiceRoleDefaultPolicy2DE8002E",
                "Roles": [
                    {
                        "Ref": "CdnCacheManagerQueueConsumerServiceRole273BAAFA"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Cdn/CacheManager/QueueConsumer/ServiceRole/DefaultPolicy/Resource"
            }
        },
        "CdnCacheManagerQueueConsumerA50B36C1": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Architectures": [
                    "arm64"
                ],
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "supabase-on-aws-${AWS::Region}"
                    },
                    "S3Key": "latest/703e21783239f1557ffe7219fab4fb09901f0ebdefca6570ebb946dd10f3085b.zip"
                },
                "Description": "Supabase/Cdn/CacheManager/QueueConsumer",
                "Environment": {
                    "Variables": {
                        "DISTRIBUTION_ID": {
                            "Ref": "CdnDistribution149FA6C8"
                        },
                        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
                    }
                },
                "Handler": "index.handler",
                "Layers": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:lambda:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":094274105915:layer:AWSLambdaPowertoolsTypeScript:25"
                            ]
                        ]
                    }
                ],
                "Role": {
                    "Fn::GetAtt": [
                        "CdnCacheManagerQueueConsumerServiceRole273BAAFA",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs20.x",
                "TracingConfig": {
                    "Mode": "Active"
                }
            },
            "DependsOn": [
                "CdnCacheManagerQueueConsumerServiceRoleDefaultPolicy2DE8002E",
                "CdnCacheManagerQueueConsumerServiceRole273BAAFA"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Cdn/CacheManager/QueueConsumer/Resource",
                "aws:asset:path": "asset.703e21783239f1557ffe7219fab4fb09901f0ebdefca6570ebb946dd10f3085b",
                "aws:asset:is-bundled": true,
                "aws:asset:property": "Code"
            }
        },
        "CdnCacheManagerQueueConsumerSqsEventSourceSupabaseCdnCacheManagerQueue31D5861E48E96905": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Properties": {
                "BatchSize": 100,
                "EventSourceArn": {
                    "Fn::GetAtt": [
                        "CdnCacheManagerQueue786D7FA2",
                        "Arn"
                    ]
                },
                "FunctionName": {
                    "Ref": "CdnCacheManagerQueueConsumerA50B36C1"
                },
                "MaximumBatchingWindowInSeconds": 5
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Cdn/CacheManager/QueueConsumer/SqsEventSource:SupabaseCdnCacheManagerQueue31D5861E/Resource"
            }
        },
        "KongTaskDefTaskRole62A71DDF": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Kong/TaskDef/TaskRole/Resource"
            }
        },
        "KongTaskDef115E456D": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Environment": [
                            {
                                "Name": "KONG_DNS_ORDER",
                                "Value": "LAST,A,CNAME"
                            },
                            {
                                "Name": "KONG_PLUGINS",
                                "Value": "request-transformer,cors,key-auth,acl,basic-auth,opentelemetry"
                            },
                            {
                                "Name": "KONG_NGINX_PROXY_PROXY_BUFFER_SIZE",
                                "Value": "160k"
                            },
                            {
                                "Name": "KONG_NGINX_PROXY_PROXY_BUFFERS",
                                "Value": "64 160k"
                            },
                            {
                                "Name": "KONG_STATUS_LISTEN",
                                "Value": "0.0.0.0:8100"
                            },
                            {
                                "Name": "SUPABASE_AUTH_URL",
                                "Value": "http://auth.supabase.internal:9999/"
                            },
                            {
                                "Name": "SUPABASE_REST_URL",
                                "Value": "http://rest.supabase.internal:3000/"
                            },
                            {
                                "Name": "SUPABASE_REALTIME_URL",
                                "Value": "http://realtime-dev.supabase.internal:4000/socket/"
                            },
                            {
                                "Name": "SUPABASE_STORAGE_URL",
                                "Value": "http://storage.supabase.internal:5000/"
                            },
                            {
                                "Name": "SUPABASE_META_HOST",
                                "Value": "http://meta.supabase.internal:8080/"
                            }
                        ],
                        "Essential": true,
                        "HealthCheck": {
                            "Command": [
                                "CMD",
                                "kong",
                                "health"
                            ],
                            "Interval": 5,
                            "Retries": 3,
                            "Timeout": 5
                        },
                        "Image": "public.ecr.aws/u3p7q2r8/kong:latest",
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "KongLogs4BD50491"
                                },
                                "awslogs-stream-prefix": "ecs",
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                }
                            }
                        },
                        "Name": "app",
                        "PortMappings": [
                            {
                                "ContainerPort": 8000,
                                "Name": "http",
                                "Protocol": "tcp"
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "SUPABASE_ANON_KEY",
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                "Ref": "AWS::Partition"
                                            },
                                            ":ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter",
                                            {
                                                "Ref": "JwtSecretAnonKeyParameter532DCC06"
                                            }
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": "SUPABASE_SERVICE_KEY",
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                "Ref": "AWS::Partition"
                                            },
                                            ":ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter",
                                            {
                                                "Ref": "JwtSecretServiceRoleKeyParameterB65536EB"
                                            }
                                        ]
                                    ]
                                }
                            }
                        ],
                        "Ulimits": [
                            {
                                "HardLimit": 65536,
                                "Name": "nofile",
                                "SoftLimit": 65536
                            }
                        ]
                    }
                ],
                "Cpu": {
                    "Fn::FindInMap": [
                        "TaskSize",
                        {
                            "Ref": "KongTaskSize93C195E9"
                        },
                        "cpu"
                    ]
                },
                "ExecutionRoleArn": {
                    "Fn::GetAtt": [
                        "KongTaskDefExecutionRole349E43DD",
                        "Arn"
                    ]
                },
                "Family": "SupabaseKongTaskDef151136E7",
                "Memory": {
                    "Fn::FindInMap": [
                        "TaskSize",
                        {
                            "Ref": "KongTaskSize93C195E9"
                        },
                        "memory"
                    ]
                },
                "NetworkMode": "awsvpc",
                "RequiresCompatibilities": [
                    "FARGATE"
                ],
                "RuntimePlatform": {
                    "CpuArchitecture": "ARM64",
                    "OperatingSystemFamily": "LINUX"
                },
                "TaskRoleArn": {
                    "Fn::GetAtt": [
                        "KongTaskDefTaskRole62A71DDF",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Kong/TaskDef/Resource"
            }
        },
        "KongTaskDefExecutionRole349E43DD": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Kong/TaskDef/ExecutionRole/Resource"
            }
        },
        "KongTaskDefExecutionRoleDefaultPolicy99546D68": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "KongLogs4BD50491",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Action": [
                                "ssm:DescribeParameters",
                                "ssm:GetParameters",
                                "ssm:GetParameter",
                                "ssm:GetParameterHistory"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":ssm:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":parameter",
                                        {
                                            "Ref": "JwtSecretAnonKeyParameter532DCC06"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            "Action": [
                                "ssm:DescribeParameters",
                                "ssm:GetParameters",
                                "ssm:GetParameter",
                                "ssm:GetParameterHistory"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":ssm:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":parameter",
                                        {
                                            "Ref": "JwtSecretServiceRoleKeyParameterB65536EB"
                                        }
                                    ]
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "KongTaskDefExecutionRoleDefaultPolicy99546D68",
                "Roles": [
                    {
                        "Ref": "KongTaskDefExecutionRole349E43DD"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Kong/TaskDef/ExecutionRole/DefaultPolicy/Resource"
            }
        },
        "KongLogs4BD50491": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": 30
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Kong/Logs/Resource"
            }
        },
        "KongService33127C91": {
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "ClusterEB0386A7"
                },
                "DeploymentConfiguration": {
                    "Alarms": {
                        "AlarmNames": [],
                        "Enable": false,
                        "Rollback": false
                    },
                    "DeploymentCircuitBreaker": {
                        "Enable": true,
                        "Rollback": true
                    },
                    "MaximumPercent": 200,
                    "MinimumHealthyPercent": 50
                },
                "DeploymentController": {
                    "Type": "ECS"
                },
                "DesiredCount": {
                    "Fn::If": [
                        "KongServiceEnabled5CB62A18",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        0
                    ]
                },
                "EnableECSManagedTags": true,
                "HealthCheckGracePeriodSeconds": 60,
                "LaunchType": "FARGATE",
                "LoadBalancers": [
                    {
                        "ContainerName": "app",
                        "ContainerPort": 8000,
                        "TargetGroupArn": {
                            "Ref": "KongTargetGroupD0277B2A"
                        }
                    }
                ],
                "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                        "AssignPublicIp": "DISABLED",
                        "SecurityGroups": [
                            {
                                "Fn::GetAtt": [
                                    "KongServiceSecurityGroupE199EE6C",
                                    "GroupId"
                                ]
                            }
                        ],
                        "Subnets": [
                            {
                                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0"
                            },
                            {
                                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A"
                            }
                        ]
                    }
                },
                "PropagateTags": "SERVICE",
                "ServiceRegistries": [
                    {
                        "ContainerName": "app",
                        "ContainerPort": 8000,
                        "RegistryArn": {
                            "Fn::GetAtt": [
                                "KongServiceCloudmapService59ECFE3A",
                                "Arn"
                            ]
                        }
                    }
                ],
                "TaskDefinition": {
                    "Ref": "KongTaskDef115E456D"
                }
            },
            "DependsOn": [
                "KongTaskDefTaskRole62A71DDF",
                "LoadBalancerListenerE1A099B9"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Kong/Service/Service"
            }
        },
        "KongServiceSecurityGroupE199EE6C": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Supabase/Kong/Service/SecurityGroup",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "Allow all outbound traffic by default",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "DependsOn": [
                "KongTaskDefTaskRole62A71DDF"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Kong/Service/SecurityGroup/Resource"
            }
        },
        "KongServiceSecurityGroupfromSupabaseLoadBalancerSecurityGroupADDF6EB880000F4CA2E4": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "Load balancer to target",
                "FromPort": 8000,
                "GroupId": {
                    "Fn::GetAtt": [
                        "KongServiceSecurityGroupE199EE6C",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "LoadBalancerSecurityGroupA28D6DD7",
                        "GroupId"
                    ]
                },
                "ToPort": 8000
            },
            "DependsOn": [
                "KongTaskDefTaskRole62A71DDF"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Kong/Service/SecurityGroup/from SupabaseLoadBalancerSecurityGroupADDF6EB8:8000"
            }
        },
        "KongServiceSecurityGroupfromSupabaseLoadBalancerSecurityGroupADDF6EB881008D65C13D": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "ALB healthcheck",
                "FromPort": 8100,
                "GroupId": {
                    "Fn::GetAtt": [
                        "KongServiceSecurityGroupE199EE6C",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "LoadBalancerSecurityGroupA28D6DD7",
                        "GroupId"
                    ]
                },
                "ToPort": 8100
            },
            "DependsOn": [
                "KongTaskDefTaskRole62A71DDF"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Kong/Service/SecurityGroup/from SupabaseLoadBalancerSecurityGroupADDF6EB8:8100"
            }
        },
        "KongServiceCloudmapService59ECFE3A": {
            "Type": "AWS::ServiceDiscovery::Service",
            "Properties": {
                "DnsConfig": {
                    "DnsRecords": [
                        {
                            "TTL": 10,
                            "Type": "SRV"
                        },
                        {
                            "Type": "A",
                            "TTL": 10
                        }
                    ],
                    "NamespaceId": {
                        "Fn::GetAtt": [
                            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
                            "Id"
                        ]
                    },
                    "RoutingPolicy": "MULTIVALUE"
                },
                "HealthCheckCustomConfig": {
                    "FailureThreshold": 1
                },
                "Name": "kong",
                "NamespaceId": {
                    "Fn::GetAtt": [
                        "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
                        "Id"
                    ]
                }
            },
            "DependsOn": [
                "KongTaskDefTaskRole62A71DDF"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Kong/Service/CloudmapService/Resource"
            }
        },
        "KongServiceTaskCountTarget5CD21EEB": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 20,
                "MinCapacity": 2,
                "ResourceId": {
                    "Fn::Join": [
                        "",
                        [
                            "service/",
                            {
                                "Ref": "ClusterEB0386A7"
                            },
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "KongService33127C91",
                                    "Name"
                                ]
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":iam::",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
                        ]
                    ]
                },
                "ScalableDimension": "ecs:service:DesiredCount",
                "ServiceNamespace": "ecs"
            },
            "DependsOn": [
                "KongTaskDefTaskRole62A71DDF"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Kong/Service/TaskCount/Target/Resource"
            },
            "Condition": "KongAutoScalingEnabled41DC2F80"
        },
        "KongServiceTaskCountTargetScaleOnCpuE9FBE5E2": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "SupabaseKongServiceTaskCountTargetScaleOnCpu7C47F3C3",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "KongServiceTaskCountTarget5CD21EEB"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
                    },
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "TargetValue": 50
                }
            },
            "DependsOn": [
                "KongTaskDefTaskRole62A71DDF"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Kong/Service/TaskCount/Target/ScaleOnCpu/Resource"
            },
            "Condition": "KongAutoScalingEnabled41DC2F80"
        },
        "KongTargetGroupD0277B2A": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 5,
                "HealthCheckPath": "/status",
                "HealthCheckPort": "8100",
                "HealthCheckTimeoutSeconds": 2,
                "Port": 8000,
                "Protocol": "HTTP",
                "TargetGroupAttributes": [
                    {
                        "Key": "deregistration_delay.timeout_seconds",
                        "Value": "30"
                    },
                    {
                        "Key": "stickiness.enabled",
                        "Value": "false"
                    }
                ],
                "TargetType": "ip",
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Kong/TargetGroup/Resource"
            }
        },
        "AuthTaskDefTaskRole8CE224AF": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/TaskDef/TaskRole/Resource"
            }
        },
        "AuthTaskDef5FB652ED": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Environment": [
                            {
                                "Name": "GOTRUE_API_HOST",
                                "Value": "0.0.0.0"
                            },
                            {
                                "Name": "GOTRUE_API_PORT",
                                "Value": "9999"
                            },
                            {
                                "Name": "API_EXTERNAL_URL",
                                "Value": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "https://",
                                            {
                                                "Fn::GetAtt": [
                                                    "CdnDistribution149FA6C8",
                                                    "DomainName"
                                                ]
                                            }
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": "GOTRUE_DB_DRIVER",
                                "Value": "postgres"
                            },
                            {
                                "Name": "GOTRUE_SITE_URL",
                                "Value": {
                                    "Ref": "SiteUrl"
                                }
                            },
                            {
                                "Name": "GOTRUE_URI_ALLOW_LIST",
                                "Value": {
                                    "Ref": "RedirectUrls"
                                }
                            },
                            {
                                "Name": "GOTRUE_DISABLE_SIGNUP",
                                "Value": {
                                    "Ref": "DisableSignup"
                                }
                            },
                            {
                                "Name": "GOTRUE_JWT_ADMIN_ROLES",
                                "Value": "service_role"
                            },
                            {
                                "Name": "GOTRUE_JWT_AUD",
                                "Value": "authenticated"
                            },
                            {
                                "Name": "GOTRUE_JWT_DEFAULT_GROUP_NAME",
                                "Value": "authenticated"
                            },
                            {
                                "Name": "GOTRUE_JWT_EXP",
                                "Value": {
                                    "Ref": "JwtExpiryLimit"
                                }
                            },
                            {
                                "Name": "GOTRUE_EXTERNAL_EMAIL_ENABLED",
                                "Value": "true"
                            },
                            {
                                "Name": "GOTRUE_MAILER_AUTOCONFIRM",
                                "Value": "false"
                            },
                            {
                                "Name": "GOTRUE_SMTP_ADMIN_EMAIL",
                                "Value": {
                                    "Fn::If": [
                                        "WorkMailEnabled",
                                        {
                                            "Fn::GetAtt": [
                                                "SmtpWorkMailNestedStackWorkMailNestedStackResource042ECB25",
                                                "Outputs.SupabaseSmtpWorkMailOrganizationSupabaseBD859A4AEmail"
                                            ]
                                        },
                                        {
                                            "Ref": "Email"
                                        }
                                    ]
                                }
                            },
                            {
                                "Name": "GOTRUE_SMTP_HOST",
                                "Value": {
                                    "Fn::If": [
                                        "WorkMailEnabled",
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "smtp.mail.",
                                                    {
                                                        "Ref": "SesRegion"
                                                    },
                                                    ".awsapps.com"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "email-smtp.",
                                                    {
                                                        "Ref": "SesRegion"
                                                    },
                                                    ".amazonaws.com"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Name": "GOTRUE_SMTP_PORT",
                                "Value": "465"
                            },
                            {
                                "Name": "GOTRUE_SMTP_SENDER_NAME",
                                "Value": {
                                    "Ref": "SenderName"
                                }
                            },
                            {
                                "Name": "GOTRUE_MAILER_URLPATHS_INVITE",
                                "Value": "/auth/v1/verify"
                            },
                            {
                                "Name": "GOTRUE_MAILER_URLPATHS_CONFIRMATION",
                                "Value": "/auth/v1/verify"
                            },
                            {
                                "Name": "GOTRUE_MAILER_URLPATHS_RECOVERY",
                                "Value": "/auth/v1/verify"
                            },
                            {
                                "Name": "GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE",
                                "Value": "/auth/v1/verify"
                            },
                            {
                                "Name": "GOTRUE_EXTERNAL_PHONE_ENABLED",
                                "Value": "false"
                            },
                            {
                                "Name": "GOTRUE_SMS_AUTOCONFIRM",
                                "Value": "true"
                            },
                            {
                                "Name": "GOTRUE_RATE_LIMIT_EMAIL_SENT",
                                "Value": "3600"
                            },
                            {
                                "Name": "GOTRUE_PASSWORD_MIN_LENGTH",
                                "Value": {
                                    "Ref": "PasswordMinLength"
                                }
                            },
                            {
                                "Name": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "GOTRUE_EXTERNAL_",
                                            {
                                                "Fn::If": [
                                                    "AuthProvider1Enabled983DA6B5",
                                                    {
                                                        "Ref": "AuthProvider1Name740DD3F6"
                                                    },
                                                    "PROVIDER1"
                                                ]
                                            },
                                            "_ENABLED"
                                        ]
                                    ]
                                },
                                "Value": {
                                    "Fn::If": [
                                        "AuthProvider1Enabled983DA6B5",
                                        "true",
                                        "false"
                                    ]
                                }
                            },
                            {
                                "Name": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "GOTRUE_EXTERNAL_",
                                            {
                                                "Fn::If": [
                                                    "AuthProvider1Enabled983DA6B5",
                                                    {
                                                        "Ref": "AuthProvider1Name740DD3F6"
                                                    },
                                                    "PROVIDER1"
                                                ]
                                            },
                                            "_REDIRECT_URI"
                                        ]
                                    ]
                                },
                                "Value": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "https://",
                                            {
                                                "Fn::GetAtt": [
                                                    "CdnDistribution149FA6C8",
                                                    "DomainName"
                                                ]
                                            },
                                            "/auth/v1/callback"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "GOTRUE_EXTERNAL_",
                                            {
                                                "Fn::If": [
                                                    "AuthProvider2Enabled05B8862B",
                                                    {
                                                        "Ref": "AuthProvider2Name573986E5"
                                                    },
                                                    "PROVIDER2"
                                                ]
                                            },
                                            "_ENABLED"
                                        ]
                                    ]
                                },
                                "Value": {
                                    "Fn::If": [
                                        "AuthProvider2Enabled05B8862B",
                                        "true",
                                        "false"
                                    ]
                                }
                            },
                            {
                                "Name": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "GOTRUE_EXTERNAL_",
                                            {
                                                "Fn::If": [
                                                    "AuthProvider2Enabled05B8862B",
                                                    {
                                                        "Ref": "AuthProvider2Name573986E5"
                                                    },
                                                    "PROVIDER2"
                                                ]
                                            },
                                            "_REDIRECT_URI"
                                        ]
                                    ]
                                },
                                "Value": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "https://",
                                            {
                                                "Fn::GetAtt": [
                                                    "CdnDistribution149FA6C8",
                                                    "DomainName"
                                                ]
                                            },
                                            "/auth/v1/callback"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "GOTRUE_EXTERNAL_",
                                            {
                                                "Fn::If": [
                                                    "AuthProvider3Enabled464D1673",
                                                    {
                                                        "Ref": "AuthProvider3NameA8A7785F"
                                                    },
                                                    "PROVIDER3"
                                                ]
                                            },
                                            "_ENABLED"
                                        ]
                                    ]
                                },
                                "Value": {
                                    "Fn::If": [
                                        "AuthProvider3Enabled464D1673",
                                        "true",
                                        "false"
                                    ]
                                }
                            },
                            {
                                "Name": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "GOTRUE_EXTERNAL_",
                                            {
                                                "Fn::If": [
                                                    "AuthProvider3Enabled464D1673",
                                                    {
                                                        "Ref": "AuthProvider3NameA8A7785F"
                                                    },
                                                    "PROVIDER3"
                                                ]
                                            },
                                            "_REDIRECT_URI"
                                        ]
                                    ]
                                },
                                "Value": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "https://",
                                            {
                                                "Fn::GetAtt": [
                                                    "CdnDistribution149FA6C8",
                                                    "DomainName"
                                                ]
                                            },
                                            "/auth/v1/callback"
                                        ]
                                    ]
                                }
                            }
                        ],
                        "Essential": true,
                        "HealthCheck": {
                            "Command": [
                                "CMD",
                                "wget",
                                "--no-verbose",
                                "--tries=1",
                                "--spider",
                                "http://localhost:9999/health"
                            ],
                            "Interval": 5,
                            "Retries": 3,
                            "Timeout": 5
                        },
                        "Image": {
                            "Ref": "AuthImageUri"
                        },
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "AuthLogs940C0551"
                                },
                                "awslogs-stream-prefix": "ecs",
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                }
                            }
                        },
                        "Name": "app",
                        "PortMappings": [
                            {
                                "ContainerPort": 9999,
                                "Name": "http",
                                "Protocol": "tcp"
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "GOTRUE_DB_DATABASE_URL",
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "DatabasesupabaseauthadminSecretC3287578"
                                            },
                                            ":uri::"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": "GOTRUE_JWT_SECRET",
                                "ValueFrom": {
                                    "Ref": "JwtSecretB8834B39"
                                }
                            },
                            {
                                "Name": "GOTRUE_SMTP_USER",
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "SmtpSecretF89CC16B"
                                            },
                                            ":username::"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": "GOTRUE_SMTP_PASS",
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "SmtpSecretF89CC16B"
                                            },
                                            ":password::"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "GOTRUE_EXTERNAL_",
                                            {
                                                "Fn::If": [
                                                    "AuthProvider1Enabled983DA6B5",
                                                    {
                                                        "Ref": "AuthProvider1Name740DD3F6"
                                                    },
                                                    "PROVIDER1"
                                                ]
                                            },
                                            "_CLIENT_ID"
                                        ]
                                    ]
                                },
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                "Ref": "AWS::Partition"
                                            },
                                            ":ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter",
                                            {
                                                "Ref": "AuthProvider1ClientIdParameterA8CDD11D"
                                            }
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "GOTRUE_EXTERNAL_",
                                            {
                                                "Fn::If": [
                                                    "AuthProvider1Enabled983DA6B5",
                                                    {
                                                        "Ref": "AuthProvider1Name740DD3F6"
                                                    },
                                                    "PROVIDER1"
                                                ]
                                            },
                                            "_SECRET"
                                        ]
                                    ]
                                },
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                "Ref": "AWS::Partition"
                                            },
                                            ":ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter",
                                            {
                                                "Ref": "AuthProvider1SecretParameter32101B7A"
                                            }
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "GOTRUE_EXTERNAL_",
                                            {
                                                "Fn::If": [
                                                    "AuthProvider2Enabled05B8862B",
                                                    {
                                                        "Ref": "AuthProvider2Name573986E5"
                                                    },
                                                    "PROVIDER2"
                                                ]
                                            },
                                            "_CLIENT_ID"
                                        ]
                                    ]
                                },
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                "Ref": "AWS::Partition"
                                            },
                                            ":ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter",
                                            {
                                                "Ref": "AuthProvider2ClientIdParameter30D2A6D6"
                                            }
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "GOTRUE_EXTERNAL_",
                                            {
                                                "Fn::If": [
                                                    "AuthProvider2Enabled05B8862B",
                                                    {
                                                        "Ref": "AuthProvider2Name573986E5"
                                                    },
                                                    "PROVIDER2"
                                                ]
                                            },
                                            "_SECRET"
                                        ]
                                    ]
                                },
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                "Ref": "AWS::Partition"
                                            },
                                            ":ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter",
                                            {
                                                "Ref": "AuthProvider2SecretParameter4B28A4BE"
                                            }
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "GOTRUE_EXTERNAL_",
                                            {
                                                "Fn::If": [
                                                    "AuthProvider3Enabled464D1673",
                                                    {
                                                        "Ref": "AuthProvider3NameA8A7785F"
                                                    },
                                                    "PROVIDER3"
                                                ]
                                            },
                                            "_CLIENT_ID"
                                        ]
                                    ]
                                },
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                "Ref": "AWS::Partition"
                                            },
                                            ":ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter",
                                            {
                                                "Ref": "AuthProvider3ClientIdParameter6DA38073"
                                            }
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "GOTRUE_EXTERNAL_",
                                            {
                                                "Fn::If": [
                                                    "AuthProvider3Enabled464D1673",
                                                    {
                                                        "Ref": "AuthProvider3NameA8A7785F"
                                                    },
                                                    "PROVIDER3"
                                                ]
                                            },
                                            "_SECRET"
                                        ]
                                    ]
                                },
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                "Ref": "AWS::Partition"
                                            },
                                            ":ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter",
                                            {
                                                "Ref": "AuthProvider3SecretParameter7A77F7F4"
                                            }
                                        ]
                                    ]
                                }
                            }
                        ],
                        "Ulimits": [
                            {
                                "HardLimit": 65536,
                                "Name": "nofile",
                                "SoftLimit": 65536
                            }
                        ]
                    }
                ],
                "Cpu": {
                    "Fn::FindInMap": [
                        "TaskSize",
                        {
                            "Ref": "AuthTaskSize9895C206"
                        },
                        "cpu"
                    ]
                },
                "ExecutionRoleArn": {
                    "Fn::GetAtt": [
                        "AuthTaskDefExecutionRole071231B5",
                        "Arn"
                    ]
                },
                "Family": "SupabaseAuthTaskDef66536EFB",
                "Memory": {
                    "Fn::FindInMap": [
                        "TaskSize",
                        {
                            "Ref": "AuthTaskSize9895C206"
                        },
                        "memory"
                    ]
                },
                "NetworkMode": "awsvpc",
                "RequiresCompatibilities": [
                    "FARGATE"
                ],
                "RuntimePlatform": {
                    "CpuArchitecture": "ARM64",
                    "OperatingSystemFamily": "LINUX"
                },
                "TaskRoleArn": {
                    "Fn::GetAtt": [
                        "AuthTaskDefTaskRole8CE224AF",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/TaskDef/Resource"
            }
        },
        "AuthTaskDefExecutionRole071231B5": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/TaskDef/ExecutionRole/Resource"
            }
        },
        "AuthTaskDefExecutionRoleDefaultPolicyB7AFF08D": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "AuthLogs940C0551",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "DatabasesupabaseauthadminSecretC3287578"
                            }
                        },
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "JwtSecretB8834B39"
                            }
                        },
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "SmtpSecretF89CC16B"
                            }
                        },
                        {
                            "Action": [
                                "ssm:DescribeParameters",
                                "ssm:GetParameters",
                                "ssm:GetParameter",
                                "ssm:GetParameterHistory"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":ssm:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":parameter",
                                        {
                                            "Ref": "AuthProvider1ClientIdParameterA8CDD11D"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            "Action": [
                                "ssm:DescribeParameters",
                                "ssm:GetParameters",
                                "ssm:GetParameter",
                                "ssm:GetParameterHistory"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":ssm:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":parameter",
                                        {
                                            "Ref": "AuthProvider1SecretParameter32101B7A"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            "Action": [
                                "ssm:DescribeParameters",
                                "ssm:GetParameters",
                                "ssm:GetParameter",
                                "ssm:GetParameterHistory"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":ssm:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":parameter",
                                        {
                                            "Ref": "AuthProvider2ClientIdParameter30D2A6D6"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            "Action": [
                                "ssm:DescribeParameters",
                                "ssm:GetParameters",
                                "ssm:GetParameter",
                                "ssm:GetParameterHistory"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":ssm:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":parameter",
                                        {
                                            "Ref": "AuthProvider2SecretParameter4B28A4BE"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            "Action": [
                                "ssm:DescribeParameters",
                                "ssm:GetParameters",
                                "ssm:GetParameter",
                                "ssm:GetParameterHistory"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":ssm:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":parameter",
                                        {
                                            "Ref": "AuthProvider3ClientIdParameter6DA38073"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            "Action": [
                                "ssm:DescribeParameters",
                                "ssm:GetParameters",
                                "ssm:GetParameter",
                                "ssm:GetParameterHistory"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":ssm:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":parameter",
                                        {
                                            "Ref": "AuthProvider3SecretParameter7A77F7F4"
                                        }
                                    ]
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "AuthTaskDefExecutionRoleDefaultPolicyB7AFF08D",
                "Roles": [
                    {
                        "Ref": "AuthTaskDefExecutionRole071231B5"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/TaskDef/ExecutionRole/DefaultPolicy/Resource"
            }
        },
        "AuthLogs940C0551": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": 30
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/Logs/Resource"
            }
        },
        "AuthServiceBA690728": {
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "ClusterEB0386A7"
                },
                "DeploymentConfiguration": {
                    "Alarms": {
                        "AlarmNames": [],
                        "Enable": false,
                        "Rollback": false
                    },
                    "DeploymentCircuitBreaker": {
                        "Enable": true,
                        "Rollback": true
                    },
                    "MaximumPercent": 200,
                    "MinimumHealthyPercent": 50
                },
                "DeploymentController": {
                    "Type": "ECS"
                },
                "DesiredCount": {
                    "Fn::If": [
                        "AuthServiceEnabled3234D87F",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        0
                    ]
                },
                "EnableECSManagedTags": true,
                "LaunchType": "FARGATE",
                "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                        "AssignPublicIp": "DISABLED",
                        "SecurityGroups": [
                            {
                                "Fn::GetAtt": [
                                    "AuthServiceSecurityGroup6440464F",
                                    "GroupId"
                                ]
                            }
                        ],
                        "Subnets": [
                            {
                                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0"
                            },
                            {
                                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A"
                            }
                        ]
                    }
                },
                "PropagateTags": "SERVICE",
                "ServiceRegistries": [
                    {
                        "ContainerName": "app",
                        "ContainerPort": 9999,
                        "RegistryArn": {
                            "Fn::GetAtt": [
                                "AuthServiceCloudmapService57D92A65",
                                "Arn"
                            ]
                        }
                    }
                ],
                "TaskDefinition": {
                    "Ref": "AuthTaskDef5FB652ED"
                }
            },
            "DependsOn": [
                "AuthTaskDefTaskRole8CE224AF"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/Service/Service"
            }
        },
        "AuthServiceSecurityGroup6440464F": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Supabase/Auth/Service/SecurityGroup",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "Allow all outbound traffic by default",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "DependsOn": [
                "AuthTaskDefTaskRole8CE224AF"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/Service/SecurityGroup/Resource"
            }
        },
        "AuthServiceSecurityGroupfromSupabaseKongServiceSecurityGroupB3C4AC8F99999367C437": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseKongServiceSecurityGroupB3C4AC8F:9999",
                "FromPort": 9999,
                "GroupId": {
                    "Fn::GetAtt": [
                        "AuthServiceSecurityGroup6440464F",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "KongServiceSecurityGroupE199EE6C",
                        "GroupId"
                    ]
                },
                "ToPort": 9999
            },
            "DependsOn": [
                "AuthTaskDefTaskRole8CE224AF"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/Service/SecurityGroup/from SupabaseKongServiceSecurityGroupB3C4AC8F:9999"
            }
        },
        "AuthServiceCloudmapService57D92A65": {
            "Type": "AWS::ServiceDiscovery::Service",
            "Properties": {
                "DnsConfig": {
                    "DnsRecords": [
                        {
                            "TTL": 10,
                            "Type": "SRV"
                        },
                        {
                            "Type": "A",
                            "TTL": 10
                        }
                    ],
                    "NamespaceId": {
                        "Fn::GetAtt": [
                            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
                            "Id"
                        ]
                    },
                    "RoutingPolicy": "MULTIVALUE"
                },
                "HealthCheckCustomConfig": {
                    "FailureThreshold": 1
                },
                "Name": "auth",
                "NamespaceId": {
                    "Fn::GetAtt": [
                        "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
                        "Id"
                    ]
                }
            },
            "DependsOn": [
                "AuthTaskDefTaskRole8CE224AF"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/Service/CloudmapService/Resource"
            }
        },
        "AuthServiceTaskCountTarget07A8CCD2": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 20,
                "MinCapacity": 2,
                "ResourceId": {
                    "Fn::Join": [
                        "",
                        [
                            "service/",
                            {
                                "Ref": "ClusterEB0386A7"
                            },
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "AuthServiceBA690728",
                                    "Name"
                                ]
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":iam::",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
                        ]
                    ]
                },
                "ScalableDimension": "ecs:service:DesiredCount",
                "ServiceNamespace": "ecs"
            },
            "DependsOn": [
                "AuthTaskDefTaskRole8CE224AF"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/Service/TaskCount/Target/Resource"
            },
            "Condition": "AuthAutoScalingEnabled0CD7354E"
        },
        "AuthServiceTaskCountTargetScaleOnCpu0847ACEC": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "SupabaseAuthServiceTaskCountTargetScaleOnCpu253117F9",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "AuthServiceTaskCountTarget07A8CCD2"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
                    },
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "TargetValue": 50
                }
            },
            "DependsOn": [
                "AuthTaskDefTaskRole8CE224AF"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/Service/TaskCount/Target/ScaleOnCpu/Resource"
            },
            "Condition": "AuthAutoScalingEnabled0CD7354E"
        },
        "AuthProvider1ClientIdParameterA8CDD11D": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Description": "The OAuth2 Client ID registered with the external provider.",
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            "/",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "/Auth/External/",
                            {
                                "Fn::If": [
                                    "AuthProvider1Enabled983DA6B5",
                                    {
                                        "Ref": "AuthProvider1Name740DD3F6"
                                    },
                                    "Provider1"
                                ]
                            },
                            "/ClientId"
                        ]
                    ]
                },
                "Type": "String",
                "Value": {
                    "Fn::If": [
                        "AuthProvider1Enabled983DA6B5",
                        {
                            "Ref": "AuthProvider1ClientId5614D178"
                        },
                        "null"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/Provider1/ClientIdParameter/Resource"
            }
        },
        "AuthProvider1SecretParameter32101B7A": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            "/",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "/Auth/External/",
                            {
                                "Fn::If": [
                                    "AuthProvider1Enabled983DA6B5",
                                    {
                                        "Ref": "AuthProvider1Name740DD3F6"
                                    },
                                    "Provider1"
                                ]
                            },
                            "/Secret"
                        ]
                    ]
                },
                "Type": "String",
                "Value": {
                    "Fn::If": [
                        "AuthProvider1Enabled983DA6B5",
                        {
                            "Ref": "AuthProvider1SecretAE54364F"
                        },
                        "null"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/Provider1/SecretParameter/Resource"
            }
        },
        "AuthProvider2ClientIdParameter30D2A6D6": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Description": "The OAuth2 Client ID registered with the external provider.",
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            "/",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "/Auth/External/",
                            {
                                "Fn::If": [
                                    "AuthProvider2Enabled05B8862B",
                                    {
                                        "Ref": "AuthProvider2Name573986E5"
                                    },
                                    "Provider2"
                                ]
                            },
                            "/ClientId"
                        ]
                    ]
                },
                "Type": "String",
                "Value": {
                    "Fn::If": [
                        "AuthProvider2Enabled05B8862B",
                        {
                            "Ref": "AuthProvider2ClientIdF3685A2B"
                        },
                        "null"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/Provider2/ClientIdParameter/Resource"
            }
        },
        "AuthProvider2SecretParameter4B28A4BE": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            "/",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "/Auth/External/",
                            {
                                "Fn::If": [
                                    "AuthProvider2Enabled05B8862B",
                                    {
                                        "Ref": "AuthProvider2Name573986E5"
                                    },
                                    "Provider2"
                                ]
                            },
                            "/Secret"
                        ]
                    ]
                },
                "Type": "String",
                "Value": {
                    "Fn::If": [
                        "AuthProvider2Enabled05B8862B",
                        {
                            "Ref": "AuthProvider2Secret2662F55E"
                        },
                        "null"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/Provider2/SecretParameter/Resource"
            }
        },
        "AuthProvider3ClientIdParameter6DA38073": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Description": "The OAuth2 Client ID registered with the external provider.",
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            "/",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "/Auth/External/",
                            {
                                "Fn::If": [
                                    "AuthProvider3Enabled464D1673",
                                    {
                                        "Ref": "AuthProvider3NameA8A7785F"
                                    },
                                    "Provider3"
                                ]
                            },
                            "/ClientId"
                        ]
                    ]
                },
                "Type": "String",
                "Value": {
                    "Fn::If": [
                        "AuthProvider3Enabled464D1673",
                        {
                            "Ref": "AuthProvider3ClientId8DF3C6F7"
                        },
                        "null"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/Provider3/ClientIdParameter/Resource"
            }
        },
        "AuthProvider3SecretParameter7A77F7F4": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            "/",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "/Auth/External/",
                            {
                                "Fn::If": [
                                    "AuthProvider3Enabled464D1673",
                                    {
                                        "Ref": "AuthProvider3NameA8A7785F"
                                    },
                                    "Provider3"
                                ]
                            },
                            "/Secret"
                        ]
                    ]
                },
                "Type": "String",
                "Value": {
                    "Fn::If": [
                        "AuthProvider3Enabled464D1673",
                        {
                            "Ref": "AuthProvider3Secret29364F33"
                        },
                        "null"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Auth/Provider3/SecretParameter/Resource"
            }
        },
        "RestTaskDefTaskRole59E8D431": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Rest/TaskDef/TaskRole/Resource"
            }
        },
        "RestTaskDef716BD951": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Environment": [
                            {
                                "Name": "PGRST_DB_SCHEMAS",
                                "Value": "public,storage,graphql_public,ponder_data"
                            },
                            {
                                "Name": "PGRST_DB_ANON_ROLE",
                                "Value": "anon"
                            },
                            {
                                "Name": "PGRST_DB_USE_LEGACY_GUCS",
                                "Value": "false"
                            },
                            {
                                "Name": "PGRST_APP_SETTINGS_JWT_EXP",
                                "Value": {
                                    "Ref": "JwtExpiryLimit"
                                }
                            },
                            {
                                "Name": "PGRST_DB_AGGREGATES_ENABLED",
                                "Value": "true"
                            }
                        ],
                        "Essential": true,
                        "Image": {
                            "Ref": "RestImageUri"
                        },
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "RestLogsE8B49088"
                                },
                                "awslogs-stream-prefix": "ecs",
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                }
                            }
                        },
                        "Name": "app",
                        "PortMappings": [
                            {
                                "ContainerPort": 3000,
                                "Name": "http",
                                "Protocol": "tcp"
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "PGRST_DB_URI",
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "DatabaseauthenticatorSecret69FA14DE"
                                            },
                                            ":uri::"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": "PGRST_JWT_SECRET",
                                "ValueFrom": {
                                    "Ref": "JwtSecretB8834B39"
                                }
                            },
                            {
                                "Name": "PGRST_APP_SETTINGS_JWT_SECRET",
                                "ValueFrom": {
                                    "Ref": "JwtSecretB8834B39"
                                }
                            }
                        ],
                        "Ulimits": [
                            {
                                "HardLimit": 65536,
                                "Name": "nofile",
                                "SoftLimit": 65536
                            }
                        ]
                    }
                ],
                "Cpu": {
                    "Fn::FindInMap": [
                        "TaskSize",
                        {
                            "Ref": "RestTaskSize14E11A14"
                        },
                        "cpu"
                    ]
                },
                "ExecutionRoleArn": {
                    "Fn::GetAtt": [
                        "RestTaskDefExecutionRole8E4C9F62",
                        "Arn"
                    ]
                },
                "Family": "SupabaseRestTaskDef0C1A5ADE",
                "Memory": {
                    "Fn::FindInMap": [
                        "TaskSize",
                        {
                            "Ref": "RestTaskSize14E11A14"
                        },
                        "memory"
                    ]
                },
                "NetworkMode": "awsvpc",
                "RequiresCompatibilities": [
                    "FARGATE"
                ],
                "RuntimePlatform": {
                    "CpuArchitecture": "ARM64",
                    "OperatingSystemFamily": "LINUX"
                },
                "TaskRoleArn": {
                    "Fn::GetAtt": [
                        "RestTaskDefTaskRole59E8D431",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Rest/TaskDef/Resource"
            }
        },
        "RestTaskDefExecutionRole8E4C9F62": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Rest/TaskDef/ExecutionRole/Resource"
            }
        },
        "RestTaskDefExecutionRoleDefaultPolicy2E2B5505": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "RestLogsE8B49088",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "DatabaseauthenticatorSecret69FA14DE"
                            }
                        },
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "JwtSecretB8834B39"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "RestTaskDefExecutionRoleDefaultPolicy2E2B5505",
                "Roles": [
                    {
                        "Ref": "RestTaskDefExecutionRole8E4C9F62"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Rest/TaskDef/ExecutionRole/DefaultPolicy/Resource"
            }
        },
        "RestLogsE8B49088": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": 30
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Rest/Logs/Resource"
            }
        },
        "RestService8812C0B2": {
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "ClusterEB0386A7"
                },
                "DeploymentConfiguration": {
                    "Alarms": {
                        "AlarmNames": [],
                        "Enable": false,
                        "Rollback": false
                    },
                    "DeploymentCircuitBreaker": {
                        "Enable": true,
                        "Rollback": true
                    },
                    "MaximumPercent": 200,
                    "MinimumHealthyPercent": 50
                },
                "DeploymentController": {
                    "Type": "ECS"
                },
                "DesiredCount": {
                    "Fn::If": [
                        "RestServiceEnabledD6F99FCE",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        0
                    ]
                },
                "EnableECSManagedTags": true,
                "LaunchType": "FARGATE",
                "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                        "AssignPublicIp": "DISABLED",
                        "SecurityGroups": [
                            {
                                "Fn::GetAtt": [
                                    "RestServiceSecurityGroup0BAEA949",
                                    "GroupId"
                                ]
                            }
                        ],
                        "Subnets": [
                            {
                                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0"
                            },
                            {
                                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A"
                            }
                        ]
                    }
                },
                "PropagateTags": "SERVICE",
                "ServiceRegistries": [
                    {
                        "ContainerName": "app",
                        "ContainerPort": 3000,
                        "RegistryArn": {
                            "Fn::GetAtt": [
                                "RestServiceCloudmapServiceA978698C",
                                "Arn"
                            ]
                        }
                    }
                ],
                "TaskDefinition": {
                    "Ref": "RestTaskDef716BD951"
                }
            },
            "DependsOn": [
                "RestTaskDefTaskRole59E8D431"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Rest/Service/Service"
            }
        },
        "RestServiceSecurityGroup0BAEA949": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Supabase/Rest/Service/SecurityGroup",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "Allow all outbound traffic by default",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "DependsOn": [
                "RestTaskDefTaskRole59E8D431"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Rest/Service/SecurityGroup/Resource"
            }
        },
        "RestServiceSecurityGroupfromSupabaseKongServiceSecurityGroupB3C4AC8F300032126E75": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseKongServiceSecurityGroupB3C4AC8F:3000",
                "FromPort": 3000,
                "GroupId": {
                    "Fn::GetAtt": [
                        "RestServiceSecurityGroup0BAEA949",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "KongServiceSecurityGroupE199EE6C",
                        "GroupId"
                    ]
                },
                "ToPort": 3000
            },
            "DependsOn": [
                "RestTaskDefTaskRole59E8D431"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Rest/Service/SecurityGroup/from SupabaseKongServiceSecurityGroupB3C4AC8F:3000"
            }
        },
        "RestServiceSecurityGroupfromSupabaseAuthServiceSecurityGroupC0652D2330004E9DE7F5": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseAuthServiceSecurityGroupC0652D23:3000",
                "FromPort": 3000,
                "GroupId": {
                    "Fn::GetAtt": [
                        "RestServiceSecurityGroup0BAEA949",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "AuthServiceSecurityGroup6440464F",
                        "GroupId"
                    ]
                },
                "ToPort": 3000
            },
            "DependsOn": [
                "RestTaskDefTaskRole59E8D431"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Rest/Service/SecurityGroup/from SupabaseAuthServiceSecurityGroupC0652D23:3000"
            }
        },
        "RestServiceSecurityGroupfromSupabaseStorageServiceSecurityGroupADF822D430009563CF9C": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseStorageServiceSecurityGroupADF822D4:3000",
                "FromPort": 3000,
                "GroupId": {
                    "Fn::GetAtt": [
                        "RestServiceSecurityGroup0BAEA949",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "StorageServiceSecurityGroupF6280DC0",
                        "GroupId"
                    ]
                },
                "ToPort": 3000
            },
            "DependsOn": [
                "RestTaskDefTaskRole59E8D431"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Rest/Service/SecurityGroup/from SupabaseStorageServiceSecurityGroupADF822D4:3000"
            }
        },
        "RestServiceCloudmapServiceA978698C": {
            "Type": "AWS::ServiceDiscovery::Service",
            "Properties": {
                "DnsConfig": {
                    "DnsRecords": [
                        {
                            "TTL": 10,
                            "Type": "SRV"
                        },
                        {
                            "Type": "A",
                            "TTL": 10
                        }
                    ],
                    "NamespaceId": {
                        "Fn::GetAtt": [
                            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
                            "Id"
                        ]
                    },
                    "RoutingPolicy": "MULTIVALUE"
                },
                "HealthCheckCustomConfig": {
                    "FailureThreshold": 1
                },
                "Name": "rest",
                "NamespaceId": {
                    "Fn::GetAtt": [
                        "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
                        "Id"
                    ]
                }
            },
            "DependsOn": [
                "RestTaskDefTaskRole59E8D431"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Rest/Service/CloudmapService/Resource"
            }
        },
        "RestServiceTaskCountTarget8C6E8E1E": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 20,
                "MinCapacity": 2,
                "ResourceId": {
                    "Fn::Join": [
                        "",
                        [
                            "service/",
                            {
                                "Ref": "ClusterEB0386A7"
                            },
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "RestService8812C0B2",
                                    "Name"
                                ]
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":iam::",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
                        ]
                    ]
                },
                "ScalableDimension": "ecs:service:DesiredCount",
                "ServiceNamespace": "ecs"
            },
            "DependsOn": [
                "RestTaskDefTaskRole59E8D431"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Rest/Service/TaskCount/Target/Resource"
            },
            "Condition": "RestAutoScalingEnabled69452861"
        },
        "RestServiceTaskCountTargetScaleOnCpuE9845870": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "SupabaseRestServiceTaskCountTargetScaleOnCpuB529B263",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "RestServiceTaskCountTarget8C6E8E1E"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
                    },
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "TargetValue": 50
                }
            },
            "DependsOn": [
                "RestTaskDefTaskRole59E8D431"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Rest/Service/TaskCount/Target/ScaleOnCpu/Resource"
            },
            "Condition": "RestAutoScalingEnabled69452861"
        },
        "CookieSigningSecretE5797145": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
                "Description": "Supabase - Cookie Signing Secret for Realtime",
                "GenerateSecretString": {
                    "ExcludePunctuation": true,
                    "PasswordLength": 64
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-Realtime-CookieSigning-Secret"
                        ]
                    ]
                }
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/CookieSigningSecret/Resource"
            }
        },
        "RealtimeTaskDefTaskRole3682E469": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Realtime/TaskDef/TaskRole/Resource"
            }
        },
        "RealtimeTaskDef9E0DD838": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Command": [
                            "sh",
                            "-c",
                            "/app/bin/migrate && /app/bin/realtime eval \"Realtime.Release.seeds(Realtime.Repo)\" && /app/bin/server"
                        ],
                        "EntryPoint": [
                            "/usr/bin/tini",
                            "-s",
                            "-g",
                            "--"
                        ],
                        "Environment": [
                            {
                                "Name": "PORT",
                                "Value": "4000"
                            },
                            {
                                "Name": "DB_HOST",
                                "Value": {
                                    "Fn::GetAtt": [
                                        "DatabaseCluster5B53A178",
                                        "Endpoint.Address"
                                    ]
                                }
                            },
                            {
                                "Name": "DB_PORT",
                                "Value": {
                                    "Fn::GetAtt": [
                                        "DatabaseCluster5B53A178",
                                        "Endpoint.Port"
                                    ]
                                }
                            },
                            {
                                "Name": "DB_AFTER_CONNECT_QUERY",
                                "Value": "SET search_path TO realtime"
                            },
                            {
                                "Name": "DB_ENC_KEY",
                                "Value": "supabaserealtime"
                            },
                            {
                                "Name": "FLY_ALLOC_ID",
                                "Value": "fly123"
                            },
                            {
                                "Name": "FLY_APP_NAME",
                                "Value": "realtime"
                            },
                            {
                                "Name": "ERL_AFLAGS",
                                "Value": "-proto_dist inet_tcp"
                            },
                            {
                                "Name": "ENABLE_TAILSCALE",
                                "Value": "false"
                            },
                            {
                                "Name": "DNS_NODES",
                                "Value": "realtime-dev.supabase.internal"
                            }
                        ],
                        "Essential": true,
                        "Image": {
                            "Ref": "RealtimeImageUri"
                        },
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "RealtimeLogs5C43159D"
                                },
                                "awslogs-stream-prefix": "ecs",
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                }
                            }
                        },
                        "Name": "app",
                        "PortMappings": [
                            {
                                "ContainerPort": 4000,
                                "Name": "http",
                                "Protocol": "tcp"
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "DB_USER",
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "DatabaseClusterSecretAttachmentDC8466C0"
                                            },
                                            ":username::"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": "DB_PASSWORD",
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "DatabaseClusterSecretAttachmentDC8466C0"
                                            },
                                            ":password::"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": "DB_NAME",
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "DatabaseClusterSecretAttachmentDC8466C0"
                                            },
                                            ":dbname::"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": "API_JWT_SECRET",
                                "ValueFrom": {
                                    "Ref": "JwtSecretB8834B39"
                                }
                            },
                            {
                                "Name": "SECRET_KEY_BASE",
                                "ValueFrom": {
                                    "Ref": "CookieSigningSecretE5797145"
                                }
                            }
                        ],
                        "Ulimits": [
                            {
                                "HardLimit": 65536,
                                "Name": "nofile",
                                "SoftLimit": 65536
                            }
                        ]
                    }
                ],
                "Cpu": {
                    "Fn::FindInMap": [
                        "TaskSize",
                        {
                            "Ref": "RealtimeTaskSize6077FE1F"
                        },
                        "cpu"
                    ]
                },
                "ExecutionRoleArn": {
                    "Fn::GetAtt": [
                        "RealtimeTaskDefExecutionRole578AA7F5",
                        "Arn"
                    ]
                },
                "Family": "SupabaseRealtimeTaskDef0EF41020",
                "Memory": {
                    "Fn::FindInMap": [
                        "TaskSize",
                        {
                            "Ref": "RealtimeTaskSize6077FE1F"
                        },
                        "memory"
                    ]
                },
                "NetworkMode": "awsvpc",
                "RequiresCompatibilities": [
                    "FARGATE"
                ],
                "RuntimePlatform": {
                    "CpuArchitecture": "ARM64",
                    "OperatingSystemFamily": "LINUX"
                },
                "TaskRoleArn": {
                    "Fn::GetAtt": [
                        "RealtimeTaskDefTaskRole3682E469",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Realtime/TaskDef/Resource"
            }
        },
        "RealtimeTaskDefExecutionRole578AA7F5": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Realtime/TaskDef/ExecutionRole/Resource"
            }
        },
        "RealtimeTaskDefExecutionRoleDefaultPolicyD46A3DCC": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "RealtimeLogs5C43159D",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "DatabaseClusterSecretAttachmentDC8466C0"
                            }
                        },
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "JwtSecretB8834B39"
                            }
                        },
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "CookieSigningSecretE5797145"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "RealtimeTaskDefExecutionRoleDefaultPolicyD46A3DCC",
                "Roles": [
                    {
                        "Ref": "RealtimeTaskDefExecutionRole578AA7F5"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Realtime/TaskDef/ExecutionRole/DefaultPolicy/Resource"
            }
        },
        "RealtimeLogs5C43159D": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": 30
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Realtime/Logs/Resource"
            }
        },
        "RealtimeServiceA39AF596": {
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "ClusterEB0386A7"
                },
                "DeploymentConfiguration": {
                    "Alarms": {
                        "AlarmNames": [],
                        "Enable": false,
                        "Rollback": false
                    },
                    "DeploymentCircuitBreaker": {
                        "Enable": true,
                        "Rollback": true
                    },
                    "MaximumPercent": 200,
                    "MinimumHealthyPercent": 50
                },
                "DeploymentController": {
                    "Type": "ECS"
                },
                "DesiredCount": {
                    "Fn::If": [
                        "RealtimeServiceEnabled18ED891C",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        0
                    ]
                },
                "EnableECSManagedTags": true,
                "LaunchType": "FARGATE",
                "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                        "AssignPublicIp": "DISABLED",
                        "SecurityGroups": [
                            {
                                "Fn::GetAtt": [
                                    "RealtimeServiceSecurityGroup8E245E7E",
                                    "GroupId"
                                ]
                            }
                        ],
                        "Subnets": [
                            {
                                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0"
                            },
                            {
                                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A"
                            }
                        ]
                    }
                },
                "PropagateTags": "SERVICE",
                "ServiceRegistries": [
                    {
                        "ContainerName": "app",
                        "ContainerPort": 4000,
                        "RegistryArn": {
                            "Fn::GetAtt": [
                                "RealtimeServiceCloudmapServiceBBBA4A23",
                                "Arn"
                            ]
                        }
                    }
                ],
                "TaskDefinition": {
                    "Ref": "RealtimeTaskDef9E0DD838"
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C",
                "RealtimeTaskDefTaskRole3682E469"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Realtime/Service/Service"
            }
        },
        "RealtimeServiceSecurityGroup8E245E7E": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Supabase/Realtime/Service/SecurityGroup",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "Allow all outbound traffic by default",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C",
                "RealtimeTaskDefTaskRole3682E469"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Realtime/Service/SecurityGroup/Resource"
            }
        },
        "RealtimeServiceSecurityGroupfromSupabaseRealtimeServiceSecurityGroup570992FEALLTRAFFIC599B2469": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseRealtimeServiceSecurityGroup570992FE:ALL TRAFFIC",
                "GroupId": {
                    "Fn::GetAtt": [
                        "RealtimeServiceSecurityGroup8E245E7E",
                        "GroupId"
                    ]
                },
                "IpProtocol": "-1",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "RealtimeServiceSecurityGroup8E245E7E",
                        "GroupId"
                    ]
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C",
                "RealtimeTaskDefTaskRole3682E469"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Realtime/Service/SecurityGroup/from SupabaseRealtimeServiceSecurityGroup570992FE:ALL TRAFFIC"
            }
        },
        "RealtimeServiceSecurityGroupfromSupabaseKongServiceSecurityGroupB3C4AC8F40007D995F01": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseKongServiceSecurityGroupB3C4AC8F:4000",
                "FromPort": 4000,
                "GroupId": {
                    "Fn::GetAtt": [
                        "RealtimeServiceSecurityGroup8E245E7E",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "KongServiceSecurityGroupE199EE6C",
                        "GroupId"
                    ]
                },
                "ToPort": 4000
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C",
                "RealtimeTaskDefTaskRole3682E469"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Realtime/Service/SecurityGroup/from SupabaseKongServiceSecurityGroupB3C4AC8F:4000"
            }
        },
        "RealtimeServiceCloudmapServiceBBBA4A23": {
            "Type": "AWS::ServiceDiscovery::Service",
            "Properties": {
                "DnsConfig": {
                    "DnsRecords": [
                        {
                            "TTL": 10,
                            "Type": "SRV"
                        },
                        {
                            "Type": "A",
                            "TTL": 10
                        }
                    ],
                    "NamespaceId": {
                        "Fn::GetAtt": [
                            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
                            "Id"
                        ]
                    },
                    "RoutingPolicy": "MULTIVALUE"
                },
                "HealthCheckCustomConfig": {
                    "FailureThreshold": 1
                },
                "Name": "realtime-dev",
                "NamespaceId": {
                    "Fn::GetAtt": [
                        "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
                        "Id"
                    ]
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C",
                "RealtimeTaskDefTaskRole3682E469"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Realtime/Service/CloudmapService/Resource"
            }
        },
        "RealtimeServiceTaskCountTarget89349CD4": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 20,
                "MinCapacity": 2,
                "ResourceId": {
                    "Fn::Join": [
                        "",
                        [
                            "service/",
                            {
                                "Ref": "ClusterEB0386A7"
                            },
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "RealtimeServiceA39AF596",
                                    "Name"
                                ]
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":iam::",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
                        ]
                    ]
                },
                "ScalableDimension": "ecs:service:DesiredCount",
                "ServiceNamespace": "ecs"
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C",
                "RealtimeTaskDefTaskRole3682E469"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Realtime/Service/TaskCount/Target/Resource"
            },
            "Condition": "RealtimeAutoScalingEnabled7991ED3B"
        },
        "RealtimeServiceTaskCountTargetScaleOnCpu764115FF": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "SupabaseRealtimeServiceTaskCountTargetScaleOnCpu2482C1E2",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "RealtimeServiceTaskCountTarget89349CD4"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
                    },
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "TargetValue": 50
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C",
                "RealtimeTaskDefTaskRole3682E469"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Realtime/Service/TaskCount/Target/ScaleOnCpu/Resource"
            },
            "Condition": "RealtimeAutoScalingEnabled7991ED3B"
        },
        "Bucket83908E77": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                },
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Bucket/Resource"
            }
        },
        "ImgproxyTaskDefTaskRoleB88D5B6D": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Imgproxy/TaskDef/TaskRole/Resource"
            }
        },
        "ImgproxyTaskDef33BF8CEA": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Environment": [
                            {
                                "Name": "IMGPROXY_BIND",
                                "Value": ":5001"
                            },
                            {
                                "Name": "IMGPROXY_LOCAL_FILESYSTEM_ROOT",
                                "Value": "/"
                            },
                            {
                                "Name": "IMGPROXY_USE_ETAG",
                                "Value": "true"
                            },
                            {
                                "Name": "IMGPROXY_ENABLE_WEBP_DETECTION",
                                "Value": "true"
                            }
                        ],
                        "Essential": true,
                        "HealthCheck": {
                            "Command": [
                                "CMD",
                                "imgproxy",
                                "health"
                            ],
                            "Interval": 5,
                            "Retries": 3,
                            "Timeout": 5
                        },
                        "Image": {
                            "Ref": "ImgproxyImageUri"
                        },
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "ImgproxyLogs00A67BBB"
                                },
                                "awslogs-stream-prefix": "ecs",
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                }
                            }
                        },
                        "Name": "app",
                        "PortMappings": [
                            {
                                "ContainerPort": 5001,
                                "Name": "http",
                                "Protocol": "tcp"
                            }
                        ],
                        "Ulimits": [
                            {
                                "HardLimit": 65536,
                                "Name": "nofile",
                                "SoftLimit": 65536
                            }
                        ]
                    }
                ],
                "Cpu": {
                    "Fn::FindInMap": [
                        "TaskSize",
                        {
                            "Ref": "ImgproxyTaskSize5D0DD9F6"
                        },
                        "cpu"
                    ]
                },
                "ExecutionRoleArn": {
                    "Fn::GetAtt": [
                        "ImgproxyTaskDefExecutionRoleE676FD35",
                        "Arn"
                    ]
                },
                "Family": "SupabaseImgproxyTaskDef08EEF13B",
                "Memory": {
                    "Fn::FindInMap": [
                        "TaskSize",
                        {
                            "Ref": "ImgproxyTaskSize5D0DD9F6"
                        },
                        "memory"
                    ]
                },
                "NetworkMode": "awsvpc",
                "RequiresCompatibilities": [
                    "FARGATE"
                ],
                "RuntimePlatform": {
                    "CpuArchitecture": "ARM64",
                    "OperatingSystemFamily": "LINUX"
                },
                "TaskRoleArn": {
                    "Fn::GetAtt": [
                        "ImgproxyTaskDefTaskRoleB88D5B6D",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Imgproxy/TaskDef/Resource"
            }
        },
        "ImgproxyTaskDefExecutionRoleE676FD35": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Imgproxy/TaskDef/ExecutionRole/Resource"
            }
        },
        "ImgproxyTaskDefExecutionRoleDefaultPolicy28511DDA": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "ImgproxyLogs00A67BBB",
                                    "Arn"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "ImgproxyTaskDefExecutionRoleDefaultPolicy28511DDA",
                "Roles": [
                    {
                        "Ref": "ImgproxyTaskDefExecutionRoleE676FD35"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Imgproxy/TaskDef/ExecutionRole/DefaultPolicy/Resource"
            }
        },
        "ImgproxyLogs00A67BBB": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": 30
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Imgproxy/Logs/Resource"
            }
        },
        "ImgproxyServiceC5851888": {
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "ClusterEB0386A7"
                },
                "DeploymentConfiguration": {
                    "Alarms": {
                        "AlarmNames": [],
                        "Enable": false,
                        "Rollback": false
                    },
                    "DeploymentCircuitBreaker": {
                        "Enable": true,
                        "Rollback": true
                    },
                    "MaximumPercent": 200,
                    "MinimumHealthyPercent": 50
                },
                "DeploymentController": {
                    "Type": "ECS"
                },
                "DesiredCount": {
                    "Fn::If": [
                        "ImgproxyServiceEnabled64E773FC",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        0
                    ]
                },
                "EnableECSManagedTags": true,
                "LaunchType": "FARGATE",
                "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                        "AssignPublicIp": "DISABLED",
                        "SecurityGroups": [
                            {
                                "Fn::GetAtt": [
                                    "ImgproxyServiceSecurityGroupDD73DE99",
                                    "GroupId"
                                ]
                            }
                        ],
                        "Subnets": [
                            {
                                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0"
                            },
                            {
                                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A"
                            }
                        ]
                    }
                },
                "PropagateTags": "SERVICE",
                "ServiceRegistries": [
                    {
                        "ContainerName": "app",
                        "ContainerPort": 5001,
                        "RegistryArn": {
                            "Fn::GetAtt": [
                                "ImgproxyServiceCloudmapService9C9565A1",
                                "Arn"
                            ]
                        }
                    }
                ],
                "TaskDefinition": {
                    "Ref": "ImgproxyTaskDef33BF8CEA"
                }
            },
            "DependsOn": [
                "ImgproxyTaskDefTaskRoleB88D5B6D"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Imgproxy/Service/Service"
            }
        },
        "ImgproxyServiceSecurityGroupDD73DE99": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Supabase/Imgproxy/Service/SecurityGroup",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "Allow all outbound traffic by default",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "DependsOn": [
                "ImgproxyTaskDefTaskRoleB88D5B6D"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Imgproxy/Service/SecurityGroup/Resource"
            }
        },
        "ImgproxyServiceSecurityGroupfromSupabaseStorageServiceSecurityGroupADF822D450011E6FA973": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseStorageServiceSecurityGroupADF822D4:5001",
                "FromPort": 5001,
                "GroupId": {
                    "Fn::GetAtt": [
                        "ImgproxyServiceSecurityGroupDD73DE99",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "StorageServiceSecurityGroupF6280DC0",
                        "GroupId"
                    ]
                },
                "ToPort": 5001
            },
            "DependsOn": [
                "ImgproxyTaskDefTaskRoleB88D5B6D"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Imgproxy/Service/SecurityGroup/from SupabaseStorageServiceSecurityGroupADF822D4:5001"
            }
        },
        "ImgproxyServiceCloudmapService9C9565A1": {
            "Type": "AWS::ServiceDiscovery::Service",
            "Properties": {
                "DnsConfig": {
                    "DnsRecords": [
                        {
                            "TTL": 10,
                            "Type": "SRV"
                        },
                        {
                            "Type": "A",
                            "TTL": 10
                        }
                    ],
                    "NamespaceId": {
                        "Fn::GetAtt": [
                            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
                            "Id"
                        ]
                    },
                    "RoutingPolicy": "MULTIVALUE"
                },
                "HealthCheckCustomConfig": {
                    "FailureThreshold": 1
                },
                "Name": "imgproxy",
                "NamespaceId": {
                    "Fn::GetAtt": [
                        "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
                        "Id"
                    ]
                }
            },
            "DependsOn": [
                "ImgproxyTaskDefTaskRoleB88D5B6D"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Imgproxy/Service/CloudmapService/Resource"
            }
        },
        "ImgproxyServiceTaskCountTargetC19355BF": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 20,
                "MinCapacity": 2,
                "ResourceId": {
                    "Fn::Join": [
                        "",
                        [
                            "service/",
                            {
                                "Ref": "ClusterEB0386A7"
                            },
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "ImgproxyServiceC5851888",
                                    "Name"
                                ]
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":iam::",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
                        ]
                    ]
                },
                "ScalableDimension": "ecs:service:DesiredCount",
                "ServiceNamespace": "ecs"
            },
            "DependsOn": [
                "ImgproxyTaskDefTaskRoleB88D5B6D"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Imgproxy/Service/TaskCount/Target/Resource"
            },
            "Condition": "ImgproxyAutoScalingEnabled44E9E87F"
        },
        "ImgproxyServiceTaskCountTargetScaleOnCpuADE19FC6": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "SupabaseImgproxyServiceTaskCountTargetScaleOnCpu2F1B6C7E",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "ImgproxyServiceTaskCountTargetC19355BF"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
                    },
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "TargetValue": 50
                }
            },
            "DependsOn": [
                "ImgproxyTaskDefTaskRoleB88D5B6D"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Imgproxy/Service/TaskCount/Target/ScaleOnCpu/Resource"
            },
            "Condition": "ImgproxyAutoScalingEnabled44E9E87F"
        },
        "StorageTaskDefTaskRoleFB709706": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Storage/TaskDef/TaskRole/Resource"
            }
        },
        "StorageTaskDefTaskRoleDefaultPolicy0587C2F8": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "s3:GetObject*",
                                "s3:GetBucket*",
                                "s3:List*",
                                "s3:DeleteObject*",
                                "s3:PutObject",
                                "s3:PutObjectLegalHold",
                                "s3:PutObjectRetention",
                                "s3:PutObjectTagging",
                                "s3:PutObjectVersionTagging",
                                "s3:Abort*"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::GetAtt": [
                                        "Bucket83908E77",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::GetAtt": [
                                                    "Bucket83908E77",
                                                    "Arn"
                                                ]
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "StorageTaskDefTaskRoleDefaultPolicy0587C2F8",
                "Roles": [
                    {
                        "Ref": "StorageTaskDefTaskRoleFB709706"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Storage/TaskDef/TaskRole/DefaultPolicy/Resource"
            }
        },
        "StorageTaskDef36011FFA": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Environment": [
                            {
                                "Name": "POSTGREST_URL",
                                "Value": "http://rest.supabase.internal:3000"
                            },
                            {
                                "Name": "PGOPTIONS",
                                "Value": "-c search_path=storage,public"
                            },
                            {
                                "Name": "FILE_SIZE_LIMIT",
                                "Value": "52428800"
                            },
                            {
                                "Name": "STORAGE_BACKEND",
                                "Value": "s3"
                            },
                            {
                                "Name": "TENANT_ID",
                                "Value": "stub"
                            },
                            {
                                "Name": "IS_MULTITENANT",
                                "Value": "false"
                            },
                            {
                                "Name": "REGION",
                                "Value": {
                                    "Ref": "AWS::Region"
                                }
                            },
                            {
                                "Name": "GLOBAL_S3_BUCKET",
                                "Value": {
                                    "Ref": "Bucket83908E77"
                                }
                            },
                            {
                                "Name": "ENABLE_IMAGE_TRANSFORMATION",
                                "Value": "true"
                            },
                            {
                                "Name": "IMGPROXY_URL",
                                "Value": "http://imgproxy.supabase.internal:5001"
                            },
                            {
                                "Name": "WEBHOOK_URL",
                                "Value": {
                                    "Fn::GetAtt": [
                                        "CdnCacheManagerApiFunctionFunctionUrl37928FC6",
                                        "FunctionUrl"
                                    ]
                                }
                            },
                            {
                                "Name": "ENABLE_QUEUE_EVENTS",
                                "Value": "false"
                            }
                        ],
                        "Essential": true,
                        "HealthCheck": {
                            "Command": [
                                "CMD",
                                "wget",
                                "--no-verbose",
                                "--tries=1",
                                "--spider",
                                "http://localhost:5000/status"
                            ],
                            "Interval": 5,
                            "Retries": 3,
                            "Timeout": 5
                        },
                        "Image": {
                            "Ref": "StorageImageUri"
                        },
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "StorageLogs2A2D4D26"
                                },
                                "awslogs-stream-prefix": "ecs",
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                }
                            }
                        },
                        "Name": "app",
                        "PortMappings": [
                            {
                                "ContainerPort": 5000,
                                "Name": "http",
                                "Protocol": "tcp"
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "ANON_KEY",
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                "Ref": "AWS::Partition"
                                            },
                                            ":ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter",
                                            {
                                                "Ref": "JwtSecretAnonKeyParameter532DCC06"
                                            }
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": "SERVICE_KEY",
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                "Ref": "AWS::Partition"
                                            },
                                            ":ssm:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":parameter",
                                            {
                                                "Ref": "JwtSecretServiceRoleKeyParameterB65536EB"
                                            }
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": "PGRST_JWT_SECRET",
                                "ValueFrom": {
                                    "Ref": "JwtSecretB8834B39"
                                }
                            },
                            {
                                "Name": "DATABASE_URL",
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "DatabasesupabasestorageadminSecret88C76AA3"
                                            },
                                            ":uri::"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": "WEBHOOK_API_KEY",
                                "ValueFrom": {
                                    "Ref": "CdnCacheManagerApiKey137D2795"
                                }
                            }
                        ],
                        "Ulimits": [
                            {
                                "HardLimit": 65536,
                                "Name": "nofile",
                                "SoftLimit": 65536
                            }
                        ]
                    }
                ],
                "Cpu": {
                    "Fn::FindInMap": [
                        "TaskSize",
                        {
                            "Ref": "StorageTaskSizeB82D9CFB"
                        },
                        "cpu"
                    ]
                },
                "ExecutionRoleArn": {
                    "Fn::GetAtt": [
                        "StorageTaskDefExecutionRoleA2EF27E4",
                        "Arn"
                    ]
                },
                "Family": "SupabaseStorageTaskDef9FD687B2",
                "Memory": {
                    "Fn::FindInMap": [
                        "TaskSize",
                        {
                            "Ref": "StorageTaskSizeB82D9CFB"
                        },
                        "memory"
                    ]
                },
                "NetworkMode": "awsvpc",
                "RequiresCompatibilities": [
                    "FARGATE"
                ],
                "RuntimePlatform": {
                    "CpuArchitecture": "ARM64",
                    "OperatingSystemFamily": "LINUX"
                },
                "TaskRoleArn": {
                    "Fn::GetAtt": [
                        "StorageTaskDefTaskRoleFB709706",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Storage/TaskDef/Resource"
            }
        },
        "StorageTaskDefExecutionRoleA2EF27E4": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Storage/TaskDef/ExecutionRole/Resource"
            }
        },
        "StorageTaskDefExecutionRoleDefaultPolicyCFBB4B95": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "StorageLogs2A2D4D26",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Action": [
                                "ssm:DescribeParameters",
                                "ssm:GetParameters",
                                "ssm:GetParameter",
                                "ssm:GetParameterHistory"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":ssm:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":parameter",
                                        {
                                            "Ref": "JwtSecretAnonKeyParameter532DCC06"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            "Action": [
                                "ssm:DescribeParameters",
                                "ssm:GetParameters",
                                "ssm:GetParameter",
                                "ssm:GetParameterHistory"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":ssm:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":parameter",
                                        {
                                            "Ref": "JwtSecretServiceRoleKeyParameterB65536EB"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "JwtSecretB8834B39"
                            }
                        },
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "DatabasesupabasestorageadminSecret88C76AA3"
                            }
                        },
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "CdnCacheManagerApiKey137D2795"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "StorageTaskDefExecutionRoleDefaultPolicyCFBB4B95",
                "Roles": [
                    {
                        "Ref": "StorageTaskDefExecutionRoleA2EF27E4"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Storage/TaskDef/ExecutionRole/DefaultPolicy/Resource"
            }
        },
        "StorageLogs2A2D4D26": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": 30
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Storage/Logs/Resource"
            }
        },
        "StorageService1CFF47FC": {
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "ClusterEB0386A7"
                },
                "DeploymentConfiguration": {
                    "Alarms": {
                        "AlarmNames": [],
                        "Enable": false,
                        "Rollback": false
                    },
                    "DeploymentCircuitBreaker": {
                        "Enable": true,
                        "Rollback": true
                    },
                    "MaximumPercent": 200,
                    "MinimumHealthyPercent": 50
                },
                "DeploymentController": {
                    "Type": "ECS"
                },
                "DesiredCount": {
                    "Fn::If": [
                        "StorageServiceEnabled58819374",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        0
                    ]
                },
                "EnableECSManagedTags": true,
                "LaunchType": "FARGATE",
                "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                        "AssignPublicIp": "DISABLED",
                        "SecurityGroups": [
                            {
                                "Fn::GetAtt": [
                                    "StorageServiceSecurityGroupF6280DC0",
                                    "GroupId"
                                ]
                            }
                        ],
                        "Subnets": [
                            {
                                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0"
                            },
                            {
                                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A"
                            }
                        ]
                    }
                },
                "PropagateTags": "SERVICE",
                "ServiceRegistries": [
                    {
                        "ContainerName": "app",
                        "ContainerPort": 5000,
                        "RegistryArn": {
                            "Fn::GetAtt": [
                                "StorageServiceCloudmapService524EC31C",
                                "Arn"
                            ]
                        }
                    }
                ],
                "TaskDefinition": {
                    "Ref": "StorageTaskDef36011FFA"
                }
            },
            "DependsOn": [
                "StorageTaskDefTaskRoleDefaultPolicy0587C2F8",
                "StorageTaskDefTaskRoleFB709706"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Storage/Service/Service"
            }
        },
        "StorageServiceSecurityGroupF6280DC0": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Supabase/Storage/Service/SecurityGroup",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "Allow all outbound traffic by default",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "DependsOn": [
                "StorageTaskDefTaskRoleDefaultPolicy0587C2F8",
                "StorageTaskDefTaskRoleFB709706"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Storage/Service/SecurityGroup/Resource"
            }
        },
        "StorageServiceSecurityGroupfromSupabaseKongServiceSecurityGroupB3C4AC8F50000996D63B": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseKongServiceSecurityGroupB3C4AC8F:5000",
                "FromPort": 5000,
                "GroupId": {
                    "Fn::GetAtt": [
                        "StorageServiceSecurityGroupF6280DC0",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "KongServiceSecurityGroupE199EE6C",
                        "GroupId"
                    ]
                },
                "ToPort": 5000
            },
            "DependsOn": [
                "StorageTaskDefTaskRoleDefaultPolicy0587C2F8",
                "StorageTaskDefTaskRoleFB709706"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Storage/Service/SecurityGroup/from SupabaseKongServiceSecurityGroupB3C4AC8F:5000"
            }
        },
        "StorageServiceCloudmapService524EC31C": {
            "Type": "AWS::ServiceDiscovery::Service",
            "Properties": {
                "DnsConfig": {
                    "DnsRecords": [
                        {
                            "TTL": 10,
                            "Type": "SRV"
                        },
                        {
                            "Type": "A",
                            "TTL": 10
                        }
                    ],
                    "NamespaceId": {
                        "Fn::GetAtt": [
                            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
                            "Id"
                        ]
                    },
                    "RoutingPolicy": "MULTIVALUE"
                },
                "HealthCheckCustomConfig": {
                    "FailureThreshold": 1
                },
                "Name": "storage",
                "NamespaceId": {
                    "Fn::GetAtt": [
                        "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
                        "Id"
                    ]
                }
            },
            "DependsOn": [
                "StorageTaskDefTaskRoleDefaultPolicy0587C2F8",
                "StorageTaskDefTaskRoleFB709706"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Storage/Service/CloudmapService/Resource"
            }
        },
        "StorageServiceTaskCountTargetAF72160A": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 20,
                "MinCapacity": 2,
                "ResourceId": {
                    "Fn::Join": [
                        "",
                        [
                            "service/",
                            {
                                "Ref": "ClusterEB0386A7"
                            },
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "StorageService1CFF47FC",
                                    "Name"
                                ]
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":iam::",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
                        ]
                    ]
                },
                "ScalableDimension": "ecs:service:DesiredCount",
                "ServiceNamespace": "ecs"
            },
            "DependsOn": [
                "StorageTaskDefTaskRoleDefaultPolicy0587C2F8",
                "StorageTaskDefTaskRoleFB709706"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Storage/Service/TaskCount/Target/Resource"
            },
            "Condition": "StorageAutoScalingEnabled4D34646B"
        },
        "StorageServiceTaskCountTargetScaleOnCpuDB3B903C": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "SupabaseStorageServiceTaskCountTargetScaleOnCpuE2C72C87",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "StorageServiceTaskCountTargetAF72160A"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
                    },
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "TargetValue": 50
                }
            },
            "DependsOn": [
                "StorageTaskDefTaskRoleDefaultPolicy0587C2F8",
                "StorageTaskDefTaskRoleFB709706"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Storage/Service/TaskCount/Target/ScaleOnCpu/Resource"
            },
            "Condition": "StorageAutoScalingEnabled4D34646B"
        },
        "MetaTaskDefTaskRoleC662B431": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Meta/TaskDef/TaskRole/Resource"
            }
        },
        "MetaTaskDef2C490DD3": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Environment": [
                            {
                                "Name": "PG_META_PORT",
                                "Value": "8080"
                            },
                            {
                                "Name": "PG_META_DB_HOST",
                                "Value": {
                                    "Fn::GetAtt": [
                                        "DatabaseCluster5B53A178",
                                        "Endpoint.Address"
                                    ]
                                }
                            },
                            {
                                "Name": "PG_META_DB_PORT",
                                "Value": {
                                    "Fn::GetAtt": [
                                        "DatabaseCluster5B53A178",
                                        "Endpoint.Port"
                                    ]
                                }
                            }
                        ],
                        "Essential": true,
                        "Image": {
                            "Ref": "PostgresMetaImageUri"
                        },
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "MetaLogs80FD71C7"
                                },
                                "awslogs-stream-prefix": "ecs",
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                }
                            }
                        },
                        "Name": "app",
                        "PortMappings": [
                            {
                                "ContainerPort": 8080,
                                "Name": "http",
                                "Protocol": "tcp"
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "PG_META_DB_NAME",
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "DatabaseClusterSecretAttachmentDC8466C0"
                                            },
                                            ":dbname::"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": "PG_META_DB_USER",
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "DatabaseClusterSecretAttachmentDC8466C0"
                                            },
                                            ":username::"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": "PG_META_DB_PASSWORD",
                                "ValueFrom": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "DatabaseClusterSecretAttachmentDC8466C0"
                                            },
                                            ":password::"
                                        ]
                                    ]
                                }
                            }
                        ],
                        "Ulimits": [
                            {
                                "HardLimit": 65536,
                                "Name": "nofile",
                                "SoftLimit": 65536
                            }
                        ]
                    }
                ],
                "Cpu": {
                    "Fn::FindInMap": [
                        "TaskSize",
                        {
                            "Ref": "MetaTaskSize556D36D9"
                        },
                        "cpu"
                    ]
                },
                "ExecutionRoleArn": {
                    "Fn::GetAtt": [
                        "MetaTaskDefExecutionRole959286B6",
                        "Arn"
                    ]
                },
                "Family": "SupabaseMetaTaskDef48FB78F0",
                "Memory": {
                    "Fn::FindInMap": [
                        "TaskSize",
                        {
                            "Ref": "MetaTaskSize556D36D9"
                        },
                        "memory"
                    ]
                },
                "NetworkMode": "awsvpc",
                "RequiresCompatibilities": [
                    "FARGATE"
                ],
                "RuntimePlatform": {
                    "CpuArchitecture": "ARM64",
                    "OperatingSystemFamily": "LINUX"
                },
                "TaskRoleArn": {
                    "Fn::GetAtt": [
                        "MetaTaskDefTaskRoleC662B431",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Meta/TaskDef/Resource"
            }
        },
        "MetaTaskDefExecutionRole959286B6": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Meta/TaskDef/ExecutionRole/Resource"
            }
        },
        "MetaTaskDefExecutionRoleDefaultPolicy60F100A8": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "MetaLogs80FD71C7",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "DatabaseClusterSecretAttachmentDC8466C0"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "MetaTaskDefExecutionRoleDefaultPolicy60F100A8",
                "Roles": [
                    {
                        "Ref": "MetaTaskDefExecutionRole959286B6"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Meta/TaskDef/ExecutionRole/DefaultPolicy/Resource"
            }
        },
        "MetaLogs80FD71C7": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": 30
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Meta/Logs/Resource"
            }
        },
        "MetaService2BE3A4CF": {
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "ClusterEB0386A7"
                },
                "DeploymentConfiguration": {
                    "Alarms": {
                        "AlarmNames": [],
                        "Enable": false,
                        "Rollback": false
                    },
                    "DeploymentCircuitBreaker": {
                        "Enable": true,
                        "Rollback": true
                    },
                    "MaximumPercent": 200,
                    "MinimumHealthyPercent": 50
                },
                "DeploymentController": {
                    "Type": "ECS"
                },
                "DesiredCount": {
                    "Fn::If": [
                        "MetaServiceEnabled094DCF06",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        0
                    ]
                },
                "EnableECSManagedTags": true,
                "LaunchType": "FARGATE",
                "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                        "AssignPublicIp": "DISABLED",
                        "SecurityGroups": [
                            {
                                "Fn::GetAtt": [
                                    "MetaServiceSecurityGroup0E39DF35",
                                    "GroupId"
                                ]
                            }
                        ],
                        "Subnets": [
                            {
                                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0"
                            },
                            {
                                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A"
                            }
                        ]
                    }
                },
                "PropagateTags": "SERVICE",
                "ServiceRegistries": [
                    {
                        "ContainerName": "app",
                        "ContainerPort": 8080,
                        "RegistryArn": {
                            "Fn::GetAtt": [
                                "MetaServiceCloudmapService638956CC",
                                "Arn"
                            ]
                        }
                    }
                ],
                "TaskDefinition": {
                    "Ref": "MetaTaskDef2C490DD3"
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C",
                "MetaTaskDefTaskRoleC662B431"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Meta/Service/Service"
            }
        },
        "MetaServiceSecurityGroup0E39DF35": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Supabase/Meta/Service/SecurityGroup",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "Allow all outbound traffic by default",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCB9E5F0B4"
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C",
                "MetaTaskDefTaskRoleC662B431"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Meta/Service/SecurityGroup/Resource"
            }
        },
        "MetaServiceSecurityGroupfromSupabaseKongServiceSecurityGroupB3C4AC8F80805AD2C559": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "from SupabaseKongServiceSecurityGroupB3C4AC8F:8080",
                "FromPort": 8080,
                "GroupId": {
                    "Fn::GetAtt": [
                        "MetaServiceSecurityGroup0E39DF35",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "KongServiceSecurityGroupE199EE6C",
                        "GroupId"
                    ]
                },
                "ToPort": 8080
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C",
                "MetaTaskDefTaskRoleC662B431"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Meta/Service/SecurityGroup/from SupabaseKongServiceSecurityGroupB3C4AC8F:8080"
            }
        },
        "MetaServiceCloudmapService638956CC": {
            "Type": "AWS::ServiceDiscovery::Service",
            "Properties": {
                "DnsConfig": {
                    "DnsRecords": [
                        {
                            "TTL": 10,
                            "Type": "SRV"
                        },
                        {
                            "Type": "A",
                            "TTL": 10
                        }
                    ],
                    "NamespaceId": {
                        "Fn::GetAtt": [
                            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
                            "Id"
                        ]
                    },
                    "RoutingPolicy": "MULTIVALUE"
                },
                "HealthCheckCustomConfig": {
                    "FailureThreshold": 1
                },
                "Name": "meta",
                "NamespaceId": {
                    "Fn::GetAtt": [
                        "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
                        "Id"
                    ]
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C",
                "MetaTaskDefTaskRoleC662B431"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Meta/Service/CloudmapService/Resource"
            }
        },
        "MetaServiceTaskCountTarget124C5BFA": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 20,
                "MinCapacity": 2,
                "ResourceId": {
                    "Fn::Join": [
                        "",
                        [
                            "service/",
                            {
                                "Ref": "ClusterEB0386A7"
                            },
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "MetaService2BE3A4CF",
                                    "Name"
                                ]
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":iam::",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
                        ]
                    ]
                },
                "ScalableDimension": "ecs:service:DesiredCount",
                "ServiceNamespace": "ecs"
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C",
                "MetaTaskDefTaskRoleC662B431"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Meta/Service/TaskCount/Target/Resource"
            },
            "Condition": "MetaAutoScalingEnabledCF28EDB1"
        },
        "MetaServiceTaskCountTargetScaleOnCpuBFDCF132": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "SupabaseMetaServiceTaskCountTargetScaleOnCpuB433E25D",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "MetaServiceTaskCountTarget124C5BFA"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
                    },
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "TargetValue": 50
                }
            },
            "DependsOn": [
                "DatabaseMigration993F5B9C",
                "MetaTaskDefTaskRoleC662B431"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Meta/Service/TaskCount/Target/ScaleOnCpu/Resource"
            },
            "Condition": "MetaAutoScalingEnabledCF28EDB1"
        },
        "ForceDeployJobStateMachineRoleB8306D93": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": {
                                    "Fn::FindInMap": [
                                        "ServiceprincipalMap",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        "states"
                                    ]
                                }
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/ForceDeployJob/StateMachine/Role/Resource"
            }
        },
        "ForceDeployJobStateMachineRoleDefaultPolicyD8B5C2E1": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "ecs:ListServices",
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": "ecs:UpdateService",
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":ecs:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":service/",
                                        {
                                            "Ref": "ClusterEB0386A7"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "ForceDeployJobStateMachineRoleDefaultPolicyD8B5C2E1",
                "Roles": [
                    {
                        "Ref": "ForceDeployJobStateMachineRoleB8306D93"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/ForceDeployJob/StateMachine/Role/DefaultPolicy/Resource"
            }
        },
        "ForceDeployJobStateMachine528644B1": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
                "DefinitionString": {
                    "Fn::Join": [
                        "",
                        [
                            "{\"StartAt\":\"CheckInput\",\"States\":{\"CheckInput\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.services\",\"IsPresent\":true,\"Next\":\"ForceDeployment\"}],\"Default\":\"GetEcsServiceList\"},\"GetEcsServiceList\":{\"Next\":\"ForceDeployment\",\"Type\":\"Task\",\"Comment\":\"Fetch ECS Services\",\"ResultSelector\":{\"services.$\":\"$.ServiceArns\"},\"Resource\":\"arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":states:::aws-sdk:ecs:listServices\",\"Parameters\":{\"Cluster\":\"",
                            {
                                "Ref": "ClusterEB0386A7"
                            },
                            "\"}},\"ForceDeployment\":{\"Type\":\"Map\",\"End\":true,\"Parameters\":{\"service.$\":\"$$.Map.Item.Value\"},\"Iterator\":{\"StartAt\":\"ForceDeployEcsTask\",\"States\":{\"ForceDeployEcsTask\":{\"End\":true,\"Type\":\"Task\",\"Comment\":\"Force deploy ECS Tasks\",\"Resource\":\"arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":states:::aws-sdk:ecs:updateService\",\"Parameters\":{\"Cluster\":\"",
                            {
                                "Ref": "ClusterEB0386A7"
                            },
                            "\",\"Service.$\":\"$.service\",\"ForceNewDeployment\":true}}}},\"ItemsPath\":\"$.services\"}}}"
                        ]
                    ]
                },
                "RoleArn": {
                    "Fn::GetAtt": [
                        "ForceDeployJobStateMachineRoleB8306D93",
                        "Arn"
                    ]
                }
            },
            "DependsOn": [
                "ForceDeployJobStateMachineRoleDefaultPolicyD8B5C2E1",
                "ForceDeployJobStateMachineRoleB8306D93"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/ForceDeployJob/StateMachine/Resource"
            }
        },
        "ForceDeployJobStateMachineEventsRole3137AB10": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "events.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/ForceDeployJob/StateMachine/EventsRole/Resource"
            }
        },
        "ForceDeployJobStateMachineEventsRoleDefaultPolicy485FD53C": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "states:StartExecution",
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "ForceDeployJobStateMachine528644B1"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "ForceDeployJobStateMachineEventsRoleDefaultPolicy485FD53C",
                "Roles": [
                    {
                        "Ref": "ForceDeployJobStateMachineEventsRole3137AB10"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/ForceDeployJob/StateMachine/EventsRole/DefaultPolicy/Resource"
            }
        },
        "AuthParameterChanged2FC322F1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Supabase - Auth parameter changed",
                "EventPattern": {
                    "source": [
                        "aws.ssm"
                    ],
                    "detail-type": [
                        "Parameter Store Change"
                    ],
                    "detail": {
                        "name": [
                            {
                                "prefix": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "/",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "/Auth/"
                                        ]
                                    ]
                                }
                            }
                        ],
                        "operation": [
                            "Update"
                        ]
                    }
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Ref": "ForceDeployJobStateMachine528644B1"
                        },
                        "Id": "Target0",
                        "Input": {
                            "Fn::Join": [
                                "",
                                [
                                    "{\"services\":[\"",
                                    {
                                        "Ref": "AuthServiceBA690728"
                                    },
                                    "\"]}"
                                ]
                            ]
                        },
                        "RoleArn": {
                            "Fn::GetAtt": [
                                "ForceDeployJobStateMachineEventsRole3137AB10",
                                "Arn"
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/AuthParameterChanged/Resource"
            }
        },
        "StudioRepositoryE0EFFBE2": {
            "Type": "AWS::CodeCommit::Repository",
            "Properties": {
                "RepositoryDescription": "Supabase/Studio/Repository",
                "RepositoryName": {
                    "Ref": "AWS::StackName"
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Studio/Repository/Resource"
            }
        },
        "StudioRepositoryImportFunctionServiceRoleC6B8ED58": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Studio/Repository/ImportFunction/ServiceRole/Resource"
            }
        },
        "StudioRepositoryImportFunctionServiceRoleDefaultPolicyA3265637": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "codecommit:GitPull",
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "StudioRepositoryE0EFFBE2",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Action": "codecommit:GitPush",
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "StudioRepositoryE0EFFBE2",
                                    "Arn"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "StudioRepositoryImportFunctionServiceRoleDefaultPolicyA3265637",
                "Roles": [
                    {
                        "Ref": "StudioRepositoryImportFunctionServiceRoleC6B8ED58"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Studio/Repository/ImportFunction/ServiceRole/DefaultPolicy/Resource"
            }
        },
        "StudioRepositoryImportFunctionF87C7D62": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "supabase-on-aws-${AWS::Region}"
                    },
                    "S3Key": "latest/9f3f18af1863bba5966d593a9787c1672fb7493177bf2897d8ffa2be2fc2b397.zip"
                },
                "Description": "Clone to CodeCommit from remote repo (You can execute this function manually.)",
                "Environment": {
                    "Variables": {
                        "TARGET_REPO": {
                            "Fn::Join": [
                                "",
                                [
                                    "codecommit::",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "://",
                                    {
                                        "Fn::GetAtt": [
                                            "StudioRepositoryE0EFFBE2",
                                            "Name"
                                        ]
                                    }
                                ]
                            ]
                        },
                        "SOURCE_REPO": "https://github.com/supabase/supabase.git",
                        "SOURCE_BRANCH": {
                            "Ref": "StudioBranch"
                        },
                        "TARGET_BRANCH": "main"
                    }
                },
                "EphemeralStorage": {
                    "Size": 3072
                },
                "Handler": "index.handler",
                "MemorySize": 4096,
                "Role": {
                    "Fn::GetAtt": [
                        "StudioRepositoryImportFunctionServiceRoleC6B8ED58",
                        "Arn"
                    ]
                },
                "Runtime": "python3.12",
                "Timeout": 900
            },
            "DependsOn": [
                "StudioRepositoryImportFunctionServiceRoleDefaultPolicyA3265637",
                "StudioRepositoryImportFunctionServiceRoleC6B8ED58"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Studio/Repository/ImportFunction/Resource",
                "aws:asset:path": "asset.9f3f18af1863bba5966d593a9787c1672fb7493177bf2897d8ffa2be2fc2b397",
                "aws:asset:is-bundled": true,
                "aws:asset:property": "Code"
            }
        },
        "StudioRepositoryImportProviderframeworkonEventServiceRoleABEB03CC": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Studio/Repository/ImportProvider/framework-onEvent/ServiceRole/Resource"
            }
        },
        "StudioRepositoryImportProviderframeworkonEventServiceRoleDefaultPolicy0FB1A847": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "lambda:InvokeFunction",
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::GetAtt": [
                                        "StudioRepositoryImportFunctionF87C7D62",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::GetAtt": [
                                                    "StudioRepositoryImportFunctionF87C7D62",
                                                    "Arn"
                                                ]
                                            },
                                            ":*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "StudioRepositoryImportProviderframeworkonEventServiceRoleDefaultPolicy0FB1A847",
                "Roles": [
                    {
                        "Ref": "StudioRepositoryImportProviderframeworkonEventServiceRoleABEB03CC"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Studio/Repository/ImportProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
            }
        },
        "StudioRepositoryImportProviderframeworkonEventFED45CDF": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "supabase-on-aws-${AWS::Region}"
                    },
                    "S3Key": "latest/7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip"
                },
                "Description": "AWS CDK resource provider framework - onEvent (Supabase/Studio/Repository/ImportProvider)",
                "Environment": {
                    "Variables": {
                        "USER_ON_EVENT_FUNCTION_ARN": {
                            "Fn::GetAtt": [
                                "StudioRepositoryImportFunctionF87C7D62",
                                "Arn"
                            ]
                        }
                    }
                },
                "Handler": "framework.onEvent",
                "Role": {
                    "Fn::GetAtt": [
                        "StudioRepositoryImportProviderframeworkonEventServiceRoleABEB03CC",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs18.x",
                "Timeout": 900
            },
            "DependsOn": [
                "StudioRepositoryImportProviderframeworkonEventServiceRoleDefaultPolicy0FB1A847",
                "StudioRepositoryImportProviderframeworkonEventServiceRoleABEB03CC"
            ],
            "Metadata": {
                "aws:cdk:path": "Supabase/Studio/Repository/ImportProvider/framework-onEvent/Resource",
                "aws:asset:path": "asset.7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94",
                "aws:asset:is-bundled": false,
                "aws:asset:property": "Code"
            }
        },
        "StudioRepositorymain62C45C74": {
            "Type": "Custom::RepoImportJob",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StudioRepositoryImportProviderframeworkonEventFED45CDF",
                        "Arn"
                    ]
                },
                "SourceRepo": "https://github.com/supabase/supabase.git",
                "SourceBranch": {
                    "Ref": "StudioBranch"
                }
            },
            "DependsOn": [
                "StudioAppProdBranchED7568CB"
            ],
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "Supabase/Studio/Repository/main/Default"
            }
        },
        "StudioRole199EAF11": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "amplify.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Description": "The service role that will be used by AWS Amplify for SSR app logging.",
                "Path": "/service-role/"
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Studio/Role/Resource"
            }
        },
        "StudioRoleDefaultPolicy289CEC37": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "DatabasedashboarduserSecret102D2F3B"
                            }
                        },
                        {
                            "Action": [
                                "ssm:DescribeParameters",
                                "ssm:GetParameters",
                                "ssm:GetParameter",
                                "ssm:GetParameterHistory"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":ssm:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":parameter",
                                        {
                                            "Ref": "JwtSecretAnonKeyParameter532DCC06"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            "Action": [
                                "ssm:DescribeParameters",
                                "ssm:GetParameters",
                                "ssm:GetParameter",
                                "ssm:GetParameterHistory"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":ssm:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":parameter",
                                        {
                                            "Ref": "JwtSecretServiceRoleKeyParameterB65536EB"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            "Action": "codecommit:GitPull",
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "StudioRepositoryE0EFFBE2",
                                    "Arn"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "StudioRoleDefaultPolicy289CEC37",
                "Roles": [
                    {
                        "Ref": "StudioRole199EAF11"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Studio/Role/DefaultPolicy/Resource"
            }
        },
        "StudioAppE10A3450": {
            "Type": "AWS::Amplify::App",
            "Properties": {
                "BasicAuthConfig": {
                    "EnableBasicAuth": false
                },
                "BuildSpec": {
                    "Fn::Join": [
                        "",
                        [
                            "version: 1\napplications:\n  - appRoot: apps/studio\n    frontend:\n      phases:\n        preBuild:\n          commands:\n            - echo POSTGRES_PASSWORD=$(aws secretsmanager get-secret-value --secret-id $DB_SECRET_ARN --query SecretString | jq -r . | jq -r .password) >> .env.production\n            - echo SUPABASE_ANON_KEY=$(aws ssm get-parameter --region $SUPABASE_REGION --name $ANON_KEY_NAME --query Parameter.Value) >> .env.production\n            - echo SUPABASE_SERVICE_KEY=$(aws ssm get-parameter --region $SUPABASE_REGION --name $SERVICE_KEY_NAME --query Parameter.Value) >> .env.production\n            - env | grep -e STUDIO_PG_META_URL >> .env.production\n            - env | grep -e SUPABASE_ >> .env.production\n            - env | grep -e NEXT_PUBLIC_ >> .env.production\n            - cd ../../\n            - npx turbo@1.10.3 prune --scope=studio\n            - npm clean-install\n        build:\n          commands:\n            - npx turbo run build --scope=studio --include-dependencies --no-deps\n            - npm prune --omit=dev\n        postBuild:\n          commands:\n            - cd apps/studio\n            - rsync -av --ignore-existing .next/standalone/apps/studio/ .next/standalone/\n            - rsync -av --ignore-existing .next/standalone/apps/studio/node_modules/ .next/standalone/node_modules/\n            - rm -rf .next/standalone/apps\n            - cp .env .env.production .next/standalone/\n            - rsync -av --ignore-existing public/ .next/standalone/public/\n            - rsync -av --ignore-existing .next/static/ .next/standalone/.next/static/\n      artifacts:\n        baseDirectory: .next\n        files:\n          - \"**/*\"\n      cache:\n        paths:\n          - node_modules/**/*\n"
                        ]
                    ]
                },
                "CustomRules": [
                    {
                        "Source": "/<*>",
                        "Status": "404-200",
                        "Target": "/index.html"
                    }
                ],
                "EnvironmentVariables": [
                    {
                        "Name": "NODE_OPTIONS",
                        "Value": "--max-old-space-size=4096"
                    },
                    {
                        "Name": "AMPLIFY_MONOREPO_APP_ROOT",
                        "Value": "studio"
                    },
                    {
                        "Name": "AMPLIFY_DIFF_DEPLOY",
                        "Value": "false"
                    },
                    {
                        "Name": "_CUSTOM_IMAGE",
                        "Value": "public.ecr.aws/sam/build-nodejs18.x:1.103"
                    },
                    {
                        "Name": "STUDIO_PG_META_URL",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "https://",
                                    {
                                        "Fn::GetAtt": [
                                            "CdnDistribution149FA6C8",
                                            "DomainName"
                                        ]
                                    },
                                    "/pg"
                                ]
                            ]
                        }
                    },
                    {
                        "Name": "SUPABASE_URL",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "https://",
                                    {
                                        "Fn::GetAtt": [
                                            "CdnDistribution149FA6C8",
                                            "DomainName"
                                        ]
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Name": "SUPABASE_PUBLIC_URL",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "https://",
                                    {
                                        "Fn::GetAtt": [
                                            "CdnDistribution149FA6C8",
                                            "DomainName"
                                        ]
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Name": "SUPABASE_REGION",
                        "Value": {
                            "Ref": "AWS::Region"
                        }
                    },
                    {
                        "Name": "DB_SECRET_ARN",
                        "Value": {
                            "Ref": "DatabasedashboarduserSecret102D2F3B"
                        }
                    },
                    {
                        "Name": "ANON_KEY_NAME",
                        "Value": {
                            "Ref": "JwtSecretAnonKeyParameter532DCC06"
                        }
                    },
                    {
                        "Name": "SERVICE_KEY_NAME",
                        "Value": {
                            "Ref": "JwtSecretServiceRoleKeyParameterB65536EB"
                        }
                    }
                ],
                "IAMServiceRole": {
                    "Fn::GetAtt": [
                        "StudioRole199EAF11",
                        "Arn"
                    ]
                },
                "Name": "SupabaseStudio",
                "Platform": "WEB_COMPUTE",
                "Repository": {
                    "Fn::GetAtt": [
                        "StudioRepositoryE0EFFBE2",
                        "CloneUrlHttp"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Studio/App/Resource"
            }
        },
        "StudioAppProdBranchED7568CB": {
            "Type": "AWS::Amplify::Branch",
            "Properties": {
                "AppId": {
                    "Fn::GetAtt": [
                        "StudioAppE10A3450",
                        "AppId"
                    ]
                },
                "BranchName": "main",
                "EnableAutoBuild": true,
                "EnablePullRequestPreview": true,
                "EnvironmentVariables": [
                    {
                        "Name": "NEXT_PUBLIC_SITE_URL",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "https://main.",
                                    {
                                        "Fn::GetAtt": [
                                            "StudioAppE10A3450",
                                            "AppId"
                                        ]
                                    },
                                    ".amplifyapp.com"
                                ]
                            ]
                        }
                    }
                ],
                "Framework": "Next.js - SSR",
                "Stage": "PRODUCTION"
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Studio/App/ProdBranch/Resource"
            }
        },
        "StudioAmplifySSRLoggingPolicyB3151918": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":logs:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":log-group:/aws/amplify/",
                                        {
                                            "Fn::GetAtt": [
                                                "StudioAppE10A3450",
                                                "AppId"
                                            ]
                                        },
                                        ":log-stream:*"
                                    ]
                                ]
                            },
                            "Sid": "PushLogs"
                        },
                        {
                            "Action": "logs:CreateLogGroup",
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":logs:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":log-group:/aws/amplify/*"
                                    ]
                                ]
                            },
                            "Sid": "CreateLogGroup"
                        },
                        {
                            "Action": "logs:DescribeLogGroups",
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":logs:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":log-group:*"
                                    ]
                                ]
                            },
                            "Sid": "DescribeLogGroups"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            "AmplifySSRLoggingPolicy-",
                            {
                                "Fn::GetAtt": [
                                    "StudioAppE10A3450",
                                    "AppId"
                                ]
                            }
                        ]
                    ]
                },
                "Roles": [
                    {
                        "Ref": "StudioRole199EAF11"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/Studio/AmplifySSRLoggingPolicy/Resource"
            }
        },
        "CDKMetadata": {
            "Type": "AWS::CDK::Metadata",
            "Properties": {
                "Analytics": "v2:deflate64:H4sIAAAAAAAA/31VW2/aMBT+LXs3WS+atMdB6LpqW8eg2ys6OAbcJnbmCxWK8t/32U5CGNUkpHM35/Kdk5usub76mF29o1c74cXLpJSbrFk54i8s36rvVNdS7QK7IEOVcMIEIdeqkE5qFYSlLwVD/LoR/CZrftc8aH8vcrbwm1Lyld8o4YLuxC21d+KJNogc9Cfd1FrNJQ1/EAyBuXtYBPJI7p6ceKUjWxh5AHt6+EEhRfC9Q8qkk6YOhe0roRxbCe6NdMd7o30dc/iv4kHtjLD2Qn8X1S0T3GZNXnrbN+iCzakmjrCF0QdZCDOq0bLPZHYUircvc7GVaujtvxqtHEklzEjXxa6EOUie2tmxK05laGd4JNdeuZbZZCqk5fogzDFrug7OlX3EfC2SjG+8pb78i5aZAoUP2BiaN591Zf9jmpOjDVnR9ycNbhQ2VvTO6LhJ0x2eTcKDso5USMNGF1uRop0wGEWcU4hK5AlNEm40/8HhwpLULSup2hS0VroQzzZ7jOSzVzw2XVKVNUud4BvpQgPqEW8d98umNHs65RxQ+SqOyPZ2TdYi32waCOSsmXn+ItwM5bLEhpjE9bnEsoYUBmaFDS2F05emX6aMGSSyEKaS1gaHuwMqXWlvuBit+KUWqdoq3AMD4ewCDAKwX5J1kpeaig0Apzh8DzgE07pGIyLCv8E2i7YUfSaP/SSGqzqfnh/Z07AGuIzEliEBX2wNNgR9wjDFaSJjcQkwY+XEF0HYQntyetswRxZGbny/kGMZ3fkD9P/0wkccRAbD0jtov+ndkGfPt4xOtZB32mJD0S10eFjVUFFE57kmkSeDw4yAVYo7JX+mQF5O1NsOBHbtsP82y6ksp6+2X+Izl6zBwFm+1/FsOCz+d7QMhya+PZIx7QASBMSr311/NB/rwXVVSTR/KWptpdOma2svofoK1W+PEceYakS4AQj2bRvmEpHH4krgP3cBlRzbrqu16Yzh1nT3k6GWPFr7yJady91QB374qv3wrvbYqg+32dWEynpP+AB+6r6A7wPtEu2MAclsSDQchOzZvj9cf8zwu3n3bKWcGJxXWYlsmehfsHW6GVgHAAA="
            },
            "Metadata": {
                "aws:cdk:path": "Supabase/CDKMetadata/Default"
            },
            "Condition": "CDKMetadataAvailable"
        }
    },
    "Outputs": {
        "StudioUrl": {
            "Description": "The dashboard for Supabase projects.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "StudioAppProdBranchED7568CB",
                                "BranchName"
                            ]
                        },
                        ".",
                        {
                            "Fn::GetAtt": [
                                "StudioAppE10A3450",
                                "DefaultDomain"
                            ]
                        }
                    ]
                ]
            }
        },
        "SupabaseUrl": {
            "Description": "A RESTful endpoint for querying and managing your database.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "CdnDistribution149FA6C8",
                                "DomainName"
                            ]
                        }
                    ]
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "Url"
                        ]
                    ]
                }
            }
        },
        "SupabaseAnonKey": {
            "Description": "This key is safe to use in a browser if you have enabled Row Level Security for your tables and configured policies.",
            "Value": {
                "Fn::GetAtt": [
                    "JwtSecretAnonKey63F37A1E",
                    "Value"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "AnonKey"
                        ]
                    ]
                }
            }
        },
        "VpcId": {
            "Description": "The VPC ID for the Supabase stack.",
            "Value": {
                "Ref": "VPCB9E5F0B4"
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "VPC"
                        ]
                    ]
                }
            }
        },
        "ClusterArn": {
            "Description": "The ECS cluster ARN for the Supabase stack.",
            "Value": {
                "Fn::GetAtt": [
                    "ClusterEB0386A7",
                    "Arn"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "Cluster"
                        ]
                    ]
                }
            }
        },
        "ClusterSecurityGroup": {
            "Description": "The security group ID for the ECS cluster.",
            "Value": {
                "Fn::GetAtt": [
                    "DatabaseClusterSecurityGroupFEF1426A",
                    "GroupId"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "ClusterSecurityGroup"
                        ]
                    ]
                }
            }
        },
        "ClusterPostgresSecret" : {
            "Description": "The secret ARN for the ECS cluster.",
            "Value": {
                "Ref": "DatabasepostgresSecret8E64AF98"
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "ClusterPostgresSecret"
                        ]
                    ]
                }
            }
        }
    }
}