{"version":3,"sources":["../src/config/config.ts","../src/schema/columns.ts","../src/schema/schema.ts","../src/index.ts"],"sourcesContent":["import type { Prettify } from \"@/types/utils.js\";\nimport type { Abi } from \"abitype\";\nimport { type Narrow, type Transport } from \"viem\";\nimport type { GetAddress } from \"./address.js\";\nimport type { GetEventFilter } from \"./eventFilter.js\";\nimport type { NonStrictPick } from \"./utilityTypes.js\";\n\nexport type BlockConfig = {\n  /** Block number at which to start indexing events (inclusive). If `undefined`, events will be processed from block 0. Default: `undefined`. */\n  startBlock?: number;\n  /** Block number at which to stop indexing events (inclusive). If `undefined`, events will be processed in real-time. Default: `undefined`. */\n  endBlock?: number;\n  /** Maximum block range to use when calling `eth_getLogs`. Default: `10_000`. */\n  maxBlockRange?: number;\n};\n\ntype DatabaseConfig =\n  | {\n      kind: \"sqlite\";\n      /** Directory path to use for SQLite database files. Default: `\".ponder/sqlite\"`. */\n      directory?: string;\n    }\n  | {\n      kind: \"postgres\";\n      /** Postgres database connection string. Default: `DATABASE_PRIVATE_URL` > `DATABASE_URL` environment variable. */\n      connectionString?: string;\n      /** Postgres schema to use for indexed data. Default: 'public', or `RAILWAY_SERVICE_NAME`-`RAILWAY_DEPLOYMENT_ID` environment variables if provided. */\n      schema?: string;\n      /** Postgres schema to use for views returning indexed data. Default: undefined, or `RAILWAY_SERVICE_NAME` environment variable if provided. */\n      publishSchema?: string;\n      /** Postgres pool configuration passed to `node-postgres`. */\n      poolConfig?: {\n        /** Maximum number of clients in the pool. Default: `30`. */\n        max?: number;\n      };\n    };\n\nexport type OptionsConfig = {\n  /** Maximum number of seconds to wait for historical indexing to complete before responding as healthy. If historical indexing exceeds this duration, the API may serve incomplete data. Default: `240` (4 minutes). */\n  maxHealthcheckDuration?: number;\n};\n\nexport type NetworkConfig<network> = {\n  /** Chain ID of the network. */\n  chainId: network extends { chainId: infer chainId extends number }\n    ? chainId | number\n    : number;\n  /** A viem `http`, `webSocket`, or `fallback` [Transport](https://viem.sh/docs/clients/transports/http.html).\n   *\n   * __To avoid rate limiting, include a custom RPC URL.__ Usage:\n   *\n   * ```ts\n   * import { http } from \"viem\";\n   *\n   * const network = {\n   *    name: \"mainnet\",\n   *    chainId: 1,\n   *    transport: http(\"https://eth-mainnet.g.alchemy.com/v2/...\"),\n   * }\n   * ```\n   */\n  transport: Transport;\n  /** Polling interval (in ms). Default: `1_000`. */\n  pollingInterval?: number;\n  /** Maximum number of RPC requests per second. Default: `50`. */\n  maxRequestsPerSecond?: number;\n  /** (Deprecated) Maximum concurrency of tasks during the historical sync. Default: `20`. */\n  maxHistoricalTaskConcurrency?: number;\n};\n\nexport type BlockFilterConfig = {\n  startBlock: number;\n  endBlock?: number;\n  interval: number;\n};\n\ntype GetBlockFilter<\n  networks,\n  ///\n  allNetworkNames extends string = [keyof networks] extends [never]\n    ? string\n    : keyof networks & string,\n> = BlockFilterConfig & {\n  network:\n    | allNetworkNames\n    | {\n        [name in allNetworkNames]?: BlockFilterConfig;\n      };\n};\n\ntype AbiConfig<abi extends Abi | readonly unknown[]> = {\n  /** Contract application byte interface. */\n  abi: abi;\n};\n\ntype TransactionReceiptConfig = {\n  includeTransactionReceipts?: boolean;\n};\n\ntype FunctionCallConfig = {\n  /*\n   * Enable call trace indexing for this contract.\n   *\n   * - Docs: https://ponder.sh/docs/indexing/call-traces\n   */\n\n  includeCallTraces?: boolean;\n};\n\ntype GetNetwork<\n  networks,\n  contract,\n  abi extends Abi,\n  ///\n  allNetworkNames extends string = [keyof networks] extends [never]\n    ? string\n    : keyof networks & string,\n> = contract extends { network: infer network }\n  ? {\n      /**\n       * Network that this contract is deployed to. Must match a network name in `networks`.\n       * Any filter information overrides the values in the higher level \"contracts\" property.\n       * Factories cannot override an address and vice versa.\n       */\n      network:\n        | allNetworkNames\n        | {\n            [name in allNetworkNames]?: Prettify<\n              GetAddress<NonStrictPick<network, \"factory\" | \"address\">> &\n                GetEventFilter<abi, NonStrictPick<contract, \"filter\">> &\n                TransactionReceiptConfig &\n                FunctionCallConfig &\n                BlockConfig\n            >;\n          };\n    }\n  : {\n      /**\n       * Network that this contract is deployed to. Must match a network name in `networks`.\n       * Any filter information overrides the values in the higher level \"contracts\" property.\n       * Factories cannot override an address and vice versa.\n       */\n      network:\n        | allNetworkNames\n        | {\n            [name in allNetworkNames]?: Prettify<\n              GetAddress<unknown> &\n                GetEventFilter<abi, unknown> &\n                TransactionReceiptConfig &\n                FunctionCallConfig &\n                BlockConfig\n            >;\n          };\n    };\n\ntype ContractConfig<networks, contract, abi extends Abi> = Prettify<\n  AbiConfig<abi> &\n    GetNetwork<networks, NonStrictPick<contract, \"network\">, abi> &\n    GetAddress<NonStrictPick<contract, \"factory\" | \"address\">> &\n    GetEventFilter<abi, NonStrictPick<contract, \"filter\">> &\n    TransactionReceiptConfig &\n    FunctionCallConfig &\n    BlockConfig\n>;\n\ntype GetContract<networks = unknown, contract = unknown> = contract extends {\n  abi: infer abi extends Abi;\n}\n  ? // 1. Contract has a valid abi\n    ContractConfig<networks, contract, abi>\n  : // 2. Contract has an invalid abi\n    ContractConfig<networks, contract, Abi>;\n\ntype ContractsConfig<networks, contracts> = {} extends contracts\n  ? // contracts empty, return empty\n    {}\n  : {\n      [name in keyof contracts]: GetContract<networks, contracts[name]>;\n    };\n\ntype NetworksConfig<networks> = {} extends networks\n  ? {}\n  : {\n      [networkName in keyof networks]: NetworkConfig<networks[networkName]>;\n    };\n\ntype BlockFiltersConfig<\n  networks = unknown,\n  blocks = unknown,\n> = {} extends blocks\n  ? {}\n  : {\n      [name in keyof blocks]: GetBlockFilter<networks>;\n    };\n\nexport const createConfig = <\n  const networks,\n  const contracts = {},\n  const blocks = {},\n>(config: {\n  // TODO: add jsdoc to these properties.\n  networks: NetworksConfig<Narrow<networks>>;\n  contracts?: ContractsConfig<networks, Narrow<contracts>>;\n  database?: DatabaseConfig;\n  options?: OptionsConfig;\n  blocks?: BlockFiltersConfig<networks, blocks>;\n}): CreateConfigReturnType<networks, contracts, blocks> =>\n  config as Prettify<CreateConfigReturnType<networks, contracts, blocks>>;\n\nexport type Config = {\n  networks: { [networkName: string]: NetworkConfig<unknown> };\n  contracts: { [contractName: string]: GetContract };\n  database?: DatabaseConfig;\n  options?: OptionsConfig;\n  blocks: {\n    [sourceName: string]: GetBlockFilter<unknown>;\n  };\n};\n\nexport type CreateConfigReturnType<networks, contracts, blocks> = {\n  networks: networks;\n  contracts: contracts;\n  database?: DatabaseConfig;\n  options?: OptionsConfig;\n  blocks: blocks;\n};\n","import type { Prettify } from \"@/types/utils.js\";\nimport type {\n  EnumColumn,\n  Index,\n  JSONColumn,\n  ReferenceColumn,\n  Scalar,\n  ScalarColumn,\n} from \"./common.js\";\n\ntype Optional<column extends BuilderScalarColumn> = () => BuilderScalarColumn<\n  column[\" scalar\"],\n  true,\n  column[\" list\"]\n>;\n\nconst optional =\n  <column extends BuilderScalarColumn>(col: column): Optional<column> =>\n  // @ts-expect-error\n  () => {\n    const newCol = {\n      \" type\": col[\" type\"],\n      \" scalar\": col[\" scalar\"],\n      \" optional\": true,\n      \" list\": col[\" list\"],\n    } as const;\n\n    if (newCol[\" list\"]) {\n      return newCol;\n    } else {\n      return {\n        ...newCol,\n        list: list(newCol),\n        references: references(newCol),\n      };\n    }\n  };\n\ntype List<column extends BuilderScalarColumn> = () => BuilderScalarColumn<\n  column[\" scalar\"],\n  column[\" optional\"],\n  true\n>;\n\nconst list =\n  <column extends BuilderScalarColumn>(col: column): List<column> =>\n  // @ts-expect-error\n  () => {\n    const newCol = {\n      \" type\": col[\" type\"],\n      \" scalar\": col[\" scalar\"],\n      \" optional\": col[\" optional\"],\n      \" list\": true,\n    } as const;\n\n    if (newCol[\" optional\"]) {\n      return newCol;\n    } else {\n      return {\n        ...newCol,\n        optional: optional(newCol),\n      };\n    }\n  };\n\ntype EnumOptional<column extends BuilderEnumColumn> = () => BuilderEnumColumn<\n  column[\" enum\"],\n  true,\n  column[\" list\"]\n>;\n\nconst enumOptional =\n  <column extends BuilderEnumColumn>(col: column): EnumOptional<column> =>\n  // @ts-expect-error\n  () => {\n    const newCol = {\n      \" type\": col[\" type\"],\n      \" enum\": col[\" enum\"],\n      \" optional\": true,\n      \" list\": col[\" list\"],\n    } as const;\n\n    if (newCol[\" list\"]) {\n      return newCol;\n    } else {\n      return {\n        ...newCol,\n        list: enumList(newCol),\n      };\n    }\n  };\n\ntype EnumList<column extends BuilderEnumColumn> = () => BuilderEnumColumn<\n  column[\" enum\"],\n  column[\" optional\"],\n  true\n>;\n\nconst enumList =\n  <column extends BuilderEnumColumn>(col: column): EnumList<column> =>\n  // @ts-expect-error\n  () => {\n    const newCol = {\n      \" type\": col[\" type\"],\n      \" enum\": col[\" enum\"],\n      \" optional\": col[\" optional\"],\n      \" list\": true,\n    } as const;\n\n    if (newCol[\" optional\"]) {\n      return newCol;\n    } else {\n      return {\n        ...newCol,\n        optional: enumOptional(newCol),\n      };\n    }\n  };\n\ntype Asc<index extends Index> = () => BuilderIndex<\n  index[\" column\"],\n  \"asc\",\n  index[\" nulls\"]\n>;\n\nconst asc =\n  <index extends BuilderIndex>(i: index): Asc<index> =>\n  // @ts-expect-error\n  () => {\n    const newIndex = {\n      \" type\": i[\" type\"],\n      \" column\": i[\" column\"],\n      \" order\": \"asc\",\n      \" nulls\": i[\" nulls\"],\n    } as const;\n\n    if (newIndex[\" nulls\"] === undefined) {\n      return {\n        ...newIndex,\n        nullsFirst: nullsFirst(newIndex),\n        nullsLast: nullsLast(newIndex),\n      };\n    } else {\n      return newIndex;\n    }\n  };\n\ntype Desc<index extends BuilderIndex> = () => BuilderIndex<\n  index[\" column\"],\n  \"desc\",\n  index[\" nulls\"]\n>;\n\nconst desc =\n  <index extends BuilderIndex>(i: index): Desc<index> =>\n  // @ts-expect-error\n  () => {\n    const newIndex = {\n      \" type\": i[\" type\"],\n      \" column\": i[\" column\"],\n      \" order\": \"desc\",\n      \" nulls\": i[\" nulls\"],\n    } as const;\n\n    if (newIndex[\" nulls\"] === undefined) {\n      return {\n        ...newIndex,\n        nullsFirst: nullsFirst(newIndex),\n        nullsLast: nullsLast(newIndex),\n      };\n    } else {\n      return newIndex;\n    }\n  };\n\ntype NullsFirst<index extends BuilderIndex> = () => BuilderIndex<\n  index[\" column\"],\n  index[\" order\"],\n  \"first\"\n>;\n\nconst nullsFirst =\n  <index extends BuilderIndex>(i: index): NullsFirst<index> =>\n  // @ts-expect-error\n  () => {\n    const newIndex = {\n      \" type\": i[\" type\"],\n      \" column\": i[\" column\"],\n      \" order\": i[\" order\"],\n      \" nulls\": \"first\",\n    } as const;\n\n    if (newIndex[\" order\"] === undefined) {\n      return {\n        ...newIndex,\n        asc: asc(newIndex),\n        desc: desc(newIndex),\n      };\n    } else {\n      return newIndex;\n    }\n  };\n\ntype NullsLast<index extends BuilderIndex> = () => BuilderIndex<\n  index[\" column\"],\n  index[\" order\"],\n  \"last\"\n>;\n\nconst nullsLast =\n  <index extends BuilderIndex>(i: index): NullsLast<index> =>\n  // @ts-expect-error\n  () => {\n    const newIndex = {\n      \" type\": i[\" type\"],\n      \" column\": i[\" column\"],\n      \" order\": i[\" order\"],\n      \" nulls\": \"last\",\n    } as const;\n\n    if (newIndex[\" order\"] === undefined) {\n      return {\n        ...newIndex,\n        asc: asc(newIndex),\n        desc: desc(newIndex),\n      };\n    } else {\n      return newIndex;\n    }\n  };\ntype ReferenceOptional<column extends BuilderReferenceColumn> =\n  () => BuilderReferenceColumn<column[\" scalar\"], true, column[\" reference\"]>;\n\nconst referenceOptional =\n  <column extends BuilderReferenceColumn>(\n    col: column,\n  ): ReferenceOptional<column> =>\n  () => {\n    return {\n      \" type\": col[\" type\"],\n      \" scalar\": col[\" scalar\"],\n      \" optional\": true,\n      \" reference\": col[\" reference\"],\n    };\n  };\n\ntype References<column extends BuilderScalarColumn> = <\n  reference extends string,\n>(\n  ref: reference,\n) => BuilderReferenceColumn<column[\" scalar\"], column[\" optional\"], reference>;\n\nconst references =\n  <column extends BuilderScalarColumn>(col: column): References<column> =>\n  // @ts-expect-error\n  <reference extends string>(ref: reference) => {\n    const newCol = {\n      \" type\": \"reference\",\n      \" scalar\": col[\" scalar\"],\n      \" optional\": col[\" optional\"],\n      \" reference\": ref,\n    } as const;\n\n    if (newCol[\" optional\"]) {\n      return newCol;\n    } else {\n      return { ...newCol, optional: referenceOptional(newCol) };\n    }\n  };\n\ntype JSONOptional<column extends BuilderJSONColumn> = () => BuilderJSONColumn<\n  column[\" json\"],\n  true\n>;\n\nconst jsonOptional =\n  <column extends BuilderJSONColumn>(col: column): JSONOptional<column> =>\n  () => {\n    return {\n      \" type\": \"json\",\n      \" json\": {} as (typeof col)[\" json\"],\n      \" optional\": true,\n    };\n  };\n\nconst scalarColumn =\n  <scalar extends Scalar>(_scalar: scalar) =>\n  (): Prettify<BuilderScalarColumn<scalar, false, false>> => {\n    const column = {\n      \" type\": \"scalar\",\n      \" scalar\": _scalar,\n      \" optional\": false,\n      \" list\": false,\n    } as const;\n\n    return {\n      ...column,\n      optional: optional(column),\n      list: list(column),\n      references: references(column),\n    };\n  };\n\nexport type BuilderScalarColumn<\n  scalar extends Scalar = Scalar,\n  optional extends boolean = boolean,\n  list extends boolean = boolean,\n  ///\n  base extends ScalarColumn<scalar, optional, list> = ScalarColumn<\n    scalar,\n    optional,\n    list\n  >,\n> = list extends false\n  ? optional extends false\n    ? base & {\n        /**\n         * Mark the column as optional.\n         *\n         * - Docs: https://ponder.sh/docs/schema#optional\n         *\n         * @example\n         * import { createSchema } from \"@ponder/core\";\n         *\n         * export default createSchema((p) => ({\n         *   t: p.createTable({\n         *     id: p.string(),\n         *     o: p.int().optional(),\n         *   })\n         * }));\n         */\n        optional: Optional<base>;\n        /**\n         * Mark the column as a list.\n         *\n         * - Docs: https://ponder.sh/docs/schema#list\n         *\n         * @example\n         * import { createSchema } from \"@ponder/core\";\n         *\n         * export default createSchema((p) => ({\n         *   t: p.createTable({\n         *     id: p.string(),\n         *     l: p.int().list(),\n         *   })\n         * }));\n         */\n        list: List<base>;\n        references: References<base>;\n      }\n    : base & {\n        /**\n         * Mark the column as a list.\n         *\n         * - Docs: https://ponder.sh/docs/schema#list\n         *\n         * @example\n         * import { createSchema } from \"@ponder/core\";\n         *\n         * export default createSchema((p) => ({\n         *   t: p.createTable({\n         *     id: p.string(),\n         *     l: p.int().list(),\n         *   })\n         * }))\n         */\n        list: List<base>;\n        /**\n         * Mark the column as a foreign key.\n         *\n         * - Docs: https://ponder.sh/docs/schema#foreign-key\n         *\n         * @param references Table that this column is a key of.\n         *\n         * @example\n         * import { createSchema } from \"@ponder/core\";\n         *\n         * export default createSchema((p) => ({\n         *   a: p.createTable({\n         *     id: p.string(),\n         *     b_id: p.string.references(\"b.id\"),\n         *   })\n         *   b: p.createTable({\n         *     id: p.string(),\n         *   })\n         * }));\n         */\n        references: References<base>;\n      }\n  : optional extends false\n    ? base & {\n        /**\n         * Mark the column as optional.\n         *\n         * - Docs: https://ponder.sh/docs/schema#optional\n         *\n         * @example\n         * import { createSchema } from \"@ponder/core\";\n         *\n         * export default createSchema((p) => ({\n         *   t: p.createTable({\n         *     id: p.string(),\n         *     o: p.int().optional(),\n         *   })\n         * }));\n         */\n        optional: Optional<base>;\n      }\n    : base;\n\nexport type BuilderReferenceColumn<\n  scalar extends Scalar = Scalar,\n  optional extends boolean = boolean,\n  reference extends string = string,\n  ///\n  base extends ReferenceColumn<scalar, optional, reference> = ReferenceColumn<\n    scalar,\n    optional,\n    reference\n  >,\n> = optional extends false\n  ? base & {\n      /**\n       * Mark the column as optional.\n       *\n       * - Docs: https://ponder.sh/docs/schema#optional\n       *\n       * @example\n       * import { createSchema } from \"@ponder/core\";\n       *\n       * export default createSchema((p) => ({\n       *   t: p.createTable({\n       *     id: p.string(),\n       *     o: p.int().optional(),\n       *   })\n       * })\n       */\n      optional: ReferenceOptional<base>;\n    }\n  : base;\n\nexport type BuilderJSONColumn<\n  type = any,\n  optional extends boolean = boolean,\n  ///\n  base extends JSONColumn<type, optional> = JSONColumn<type, optional>,\n> = optional extends false\n  ? base & {\n      /**\n       * Mark the column as optional.\n       *\n       * - Docs: https://ponder.sh/docs/schema#optional\n       *\n       * @example\n       * import { createSchema } from \"@ponder/core\";\n       *\n       * export default createSchema((p) => ({\n       *   t: p.createTable({\n       *     id: p.string(),\n       *     o: p.json().optional(),\n       *   })\n       * }));\n       */\n      optional: JSONOptional<base>;\n    }\n  : base;\n\nexport type BuilderOneColumn<reference extends string = string> = {\n  \" type\": \"one\";\n  \" reference\": reference;\n};\n\nexport type BuilderManyColumn<\n  referenceTable extends string = string,\n  referenceColumn extends string = string,\n> = {\n  \" type\": \"many\";\n  \" referenceTable\": referenceTable;\n  \" referenceColumn\": referenceColumn;\n};\n\nexport type BuilderEnumColumn<\n  _enum extends string = string,\n  optional extends boolean = boolean,\n  list extends boolean = boolean,\n  ///\n  base extends EnumColumn<_enum, optional, list> = EnumColumn<\n    _enum,\n    optional,\n    list\n  >,\n> = list extends false\n  ? optional extends false\n    ? base & {\n        /**\n         * Mark the column as optional.\n         *\n         * - Docs: https://ponder.sh/docs/schema#optional\n         *\n         * @example\n         * import { createSchema } from \"@ponder/core\";\n         *\n         * export default createSchema((p) => ({\n         *   e: p.createEnum([\"ONE\", \"TWO\"])\n         *   t: p.createTable({\n         *     id: p.string(),\n         *     a: p.enum(\"e\").optional(),\n         *   })\n         * }));\n         */\n        optional: EnumOptional<base>;\n        /**\n         * Mark the column as a list.\n         *\n         * - Docs: https://ponder.sh/docs/schema#list\n         *\n         * @example\n         * import { createSchema } from \"@ponder/core\";\n         *\n         * export default createSchema((p) => ({\n         *   e: p.createEnum([\"ONE\", \"TWO\"])\n         *   t: p.createTable({\n         *     id: p.string(),\n         *     a: p.enum(\"e\").list(),\n         *   })\n         * }));\n         */\n        list: EnumList<base>;\n      }\n    : base & {\n        /**\n         * Mark the column as a list.\n         *\n         * - Docs: https://ponder.sh/docs/schema#list\n         *\n         * @example\n         * import { createSchema } from \"@ponder/core\";\n         *\n         * export default createSchema((p) => ({\n         *   e: p.createEnum([\"ONE\", \"TWO\"])\n         *   t: p.createTable({\n         *     id: p.string(),\n         *     a: p.enum(\"e\").list(),\n         *   })\n         * }));\n         */\n        list: EnumList<base>;\n      }\n  : optional extends false\n    ? base & {\n        /**\n         * Mark the column as optional.\n         *\n         * - Docs: https://ponder.sh/docs/schema#optional\n         *\n         * @example\n         * import { createSchema } from \"@ponder/core\";\n         *\n         * export default createSchema((p) => ({\n         *   e: p.createEnum([\"ONE\", \"TWO\"])\n         *   t: p.createTable({\n         *     id: p.string(),\n         *     a: p.enum(\"e\").optional(),\n         *   })\n         * }));\n         */\n        optional: EnumOptional<base>;\n      }\n    : base;\n\nexport type BuilderIndex<\n  column extends string | readonly string[] = string | readonly string[],\n  order extends \"asc\" | \"desc\" | undefined = \"asc\" | \"desc\" | undefined,\n  nulls extends \"first\" | \"last\" | undefined = \"first\" | \"last\" | undefined,\n  ///\n  base extends Index<column, order, nulls> = Index<column, order, nulls>,\n  isSingleColumn = column extends readonly string[] ? false : true,\n> = order extends undefined\n  ? nulls extends undefined\n    ? isSingleColumn extends true\n      ? base & {\n          asc: Asc<base>;\n          desc: Desc<base>;\n          nullsFirst: NullsFirst<base>;\n          nullsLast: NullsLast<base>;\n        }\n      : base\n    : isSingleColumn extends true\n      ? base & {\n          asc: Asc<base>;\n          desc: Desc<base>;\n        }\n      : base\n  : nulls extends undefined\n    ? isSingleColumn extends true\n      ? base & {\n          nullsFirst: NullsFirst<base>;\n          nullsLast: NullsLast<base>;\n        }\n      : base\n    : base;\n\nexport const string = scalarColumn(\"string\");\nexport const int = scalarColumn(\"int\");\nexport const float = scalarColumn(\"float\");\nexport const boolean = scalarColumn(\"boolean\");\nexport const hex = scalarColumn(\"hex\");\nexport const bigint = scalarColumn(\"bigint\");\n\nexport const json = <type = any>(): BuilderJSONColumn<type, false> => {\n  const column = {\n    \" type\": \"json\",\n    \" json\": {} as type,\n    \" optional\": false,\n  } as const;\n\n  return {\n    ...column,\n    optional: jsonOptional(column),\n  };\n};\n\nexport const one = <reference extends string>(\n  ref: reference,\n): BuilderOneColumn<reference> => ({\n  \" type\": \"one\",\n  \" reference\": ref,\n});\n\nexport const many = <\n  referenceTable extends string = string,\n  referenceColumn extends string = string,\n>(\n  ref: `${referenceTable}.${referenceColumn}`,\n): BuilderManyColumn<referenceTable, referenceColumn> => ({\n  \" type\": \"many\",\n  \" referenceTable\": ref.split(\".\")[0] as referenceTable,\n  \" referenceColumn\": ref.split(\".\")[1] as referenceColumn,\n});\n\nexport const _enum = <_enum extends string>(\n  __enum: _enum,\n): Prettify<BuilderEnumColumn<_enum, false, false>> => {\n  const column = {\n    \" type\": \"enum\",\n    \" enum\": __enum,\n    \" optional\": false,\n    \" list\": false,\n  } as const;\n\n  return {\n    ...column,\n    optional: enumOptional(column),\n    list: enumList(column),\n  };\n};\n\nexport const index = <const column extends string | readonly string[]>(\n  c: column,\n): BuilderIndex<column, undefined, undefined> => {\n  const index = {\n    \" type\": \"index\",\n    \" column\": c,\n    \" order\": undefined,\n    \" nulls\": undefined,\n  } as const;\n\n  return {\n    ...index,\n    asc: asc(index),\n    desc: desc(index),\n    nullsFirst: nullsFirst(index),\n    nullsLast: nullsLast(index),\n  } as BuilderIndex<column, undefined, undefined>;\n};\n","import {\n  type BuilderEnumColumn,\n  type BuilderIndex,\n  type BuilderJSONColumn,\n  type BuilderManyColumn,\n  type BuilderOneColumn,\n  type BuilderScalarColumn,\n  _enum,\n  bigint,\n  boolean,\n  float,\n  hex,\n  index,\n  int,\n  json,\n  many,\n  one,\n  string,\n} from \"./columns.js\";\nimport type {\n  Column,\n  Constraints,\n  EnumColumn,\n  ExtractEnumNames,\n  ExtractNonVirtualColumnNames,\n  ExtractReferenceColumnNames,\n  ExtractTableNames,\n  IdColumn,\n  Index,\n  JSONColumn,\n  ManyColumn,\n  OneColumn,\n  ReferenceColumn,\n  ScalarColumn,\n  Schema,\n  Table,\n} from \"./common.js\";\n\ntype GetTable<\n  table,\n  tableName extends string = string,\n  schema = {},\n  ///\n  tableNames extends string = {} extends schema\n    ? string\n    : ExtractTableNames<schema>,\n  enumNames extends string = {} extends schema\n    ? string\n    : ExtractEnumNames<schema>,\n> = {} extends table\n  ? {}\n  : table extends {\n        id: IdColumn;\n      }\n    ? {\n        [columnName in keyof table]: table[columnName] extends ScalarColumn\n          ? ScalarColumn\n          : table[columnName] extends ReferenceColumn\n            ? ReferenceColumn<\n                table[columnName][\" scalar\"],\n                table[columnName][\" optional\"],\n                `${tableNames}.id`\n              >\n            : table[columnName] extends JSONColumn\n              ? JSONColumn\n              : table[columnName] extends OneColumn\n                ? OneColumn<Exclude<keyof table & string, columnName | \"id\">>\n                : table[columnName] extends ManyColumn\n                  ? {} extends schema\n                    ? ManyColumn\n                    : table[columnName] extends ManyColumn<\n                          Exclude<tableNames, tableName>\n                        >\n                      ? ManyColumn<\n                          table[columnName][\" referenceTable\"],\n                          ExtractReferenceColumnNames<\n                            schema[table[columnName][\" referenceTable\"] &\n                              keyof schema],\n                            tableName\n                          > &\n                            string\n                        >\n                      : ManyColumn<Exclude<tableNames, tableName>>\n                  : table[columnName] extends EnumColumn\n                    ? EnumColumn<enumNames>\n                    : Column;\n      }\n    : { id: IdColumn } & {\n        [columnName: string]: Column;\n      };\n\ntype GetConstraints<\n  constraints,\n  table,\n  ///\n  columnName extends string = ExtractNonVirtualColumnNames<table>,\n> = {} extends constraints\n  ? {}\n  : {\n      [name in keyof constraints]: Index<columnName | readonly columnName[]>;\n    };\n\nexport const createTable = <const table, const constraints>(\n  t: GetTable<table>,\n  c?: GetConstraints<constraints, table>,\n): { table: table; constraints: constraints } => ({\n  table: t as table,\n  constraints: c as constraints,\n});\n\nexport const createEnum = <const _enum extends readonly string[]>(e: _enum) =>\n  e;\n\nconst P = {\n  createTable,\n  createEnum,\n  string,\n  bigint,\n  int,\n  float,\n  hex,\n  boolean,\n  json,\n  one,\n  many,\n  enum: _enum,\n  index,\n};\n\ntype P = {\n  /**\n   * Create a database table.\n   *\n   * - Docs: https://ponder.sh/docs/schema#tables\n   *\n   * @example\n   * export default createSchema((p) => ({\n   *   t: p.createTable({\n   *     id: p.string(),\n   *   })\n   * }));\n   */\n  createTable: <const table, const constraints>(\n    t: GetTable<table>,\n    c?: GetConstraints<constraints, table>,\n  ) => { table: table; constraints: constraints };\n  /**\n   * Create an Enum type for the database.\n   *\n   * - Docs: https://ponder.sh/docs/schema#tables\n   *\n   * @example\n   * export default createSchema((p) => ({\n   *   e: p.createEnum([\"ONE\", \"TWO\"])\n   *   t: p.createTable({\n   *     id: p.string(),\n   *     a: p.enum(\"e\"),\n   *   })\n   * }));\n   */\n\n  createEnum: <const _enum extends readonly string[]>(e: _enum) => _enum;\n  /**\n   * Primitive `string` column type.\n   *\n   * - Docs: https://ponder.sh/docs/schema#primitives\n   *\n   * @example\n   * import { createSchema } from \"@ponder/core\";\n   *\n   * export default createSchema((p) => ({\n   *   t: p.createTable({\n   *     id: p.string(),\n   *   })\n   * }));\n   */\n  string: () => BuilderScalarColumn<\"string\", false, false>;\n  /**\n   * Primitive `bigint` column type.\n   *\n   * - Docs: https://ponder.sh/docs/schema#primitives\n   *\n   * @example\n   * import { createSchema } from \"@ponder/core\";\n   *\n   * export default createSchema((p) => ({\n   *   t: p.createTable({\n   *     id: p.bigint(),\n   *   })\n   * }));\n   */\n  bigint: () => BuilderScalarColumn<\"bigint\", false, false>;\n  /**\n   * Primitive `int` column type.\n   *\n   * - Docs: https://ponder.sh/docs/schema#primitives\n   *\n   * @example\n   * import { createSchema } from \"@ponder/core\";\n   *\n   * export default createSchema((p) => ({\n   *   t: p.createTable({\n   *     id: p.int(),\n   *   })\n   * }));\n   */\n  int: () => BuilderScalarColumn<\"int\", false, false>;\n  /**\n   * Primitive `float` column type.\n   *\n   * - Docs: https://ponder.sh/docs/schema#primitives\n   *\n   * @example\n   * import { createSchema } from \"@ponder/core\";\n   *\n   * export default createSchema((p) => ({\n   *   t: p.createTable({\n   *     id: p.string(),\n   *     f: p.float(),\n   *   })\n   * }));\n   */\n\n  float: () => BuilderScalarColumn<\"float\", false, false>;\n  /**\n   * Primitive `hex` column type.\n   *\n   * - Docs: https://ponder.sh/docs/schema#primitives\n   *\n   * @example\n   * import { createSchema } from \"@ponder/core\";\n   *\n   * export default createSchema((p) => ({\n   *   t: p.createTable({\n   *     id: p.hex(),\n   *   })\n   * }));\n   */\n  hex: () => BuilderScalarColumn<\"hex\", false, false>;\n  /**\n   * Primitive `boolean` column type.\n   *\n   * - Docs: https://ponder.sh/docs/schema#primitives\n   *\n   * @example\n   * import { createSchema } from \"@ponder/core\";\n   *\n   * export default createSchema((p) => ({\n   *   t: p.createTable({\n   *     id: p.string(),\n   *     b: p.boolean(),\n   *   })\n   * }));\n   */\n  boolean: () => BuilderScalarColumn<\"boolean\", false, false>;\n  /**\n   * Primitive `JSON` column type.\n   *\n   * - Docs: https://ponder.sh/docs/schema#primitives\n   *\n   * @example\n   * import { createSchema } from \"@ponder/core\";\n   *\n   * export default createSchema((p) => ({\n   *   t: p.createTable({\n   *     id: p.string(),\n   *     b: p.json(),\n   *   })\n   * }));\n   */\n  json: <type = any>() => BuilderJSONColumn<type, false>;\n  /**\n   * One-to-one column type.`one` columns don't exist in the database. They are only present when querying data from the GraphQL API.\n   *\n   * - Docs: https://ponder.sh/docs/schema#one-to-one\n   *\n   * @param reference Reference column to be resolved.\n   *\n   * @example\n   * import { createSchema } from \"@ponder/core\";\n   *\n   * export default createSchema((p) => ({\n   *   a: p.createTable({\n   *     id: p.string(),\n   *     b_id: p.string.references(\"b.id\"),\n   *     b: p.one(\"b_id\"),\n   *   })\n   *   b: p.createTable({\n   *     id: p.string(),\n   *   })\n   * }));\n   */\n  one: <reference extends string>(\n    ref: reference,\n  ) => BuilderOneColumn<reference>;\n  /**\n   * Many-to-one column type. `many` columns don't exist in the database. They are only present when querying data from the GraphQL API.\n   *\n   * - Docs: https://ponder.sh/docs/schema#one-to-many\n   *\n   * @param reference Reference column that references the `id` column of the current table.\n   *\n   * @example\n   * import { createSchema } from \"@ponder/core\";\n   *\n   * export default createSchema((p) => ({\n   *   a: p.createTable({\n   *     id: p.string(),\n   *     ref: p.string.references(\"b.id\"),\n   *   })\n   *   b: p.createTable({\n   *     id: p.string(),\n   *     m: p.many(\"a.ref\"),\n   *   })\n   * }));\n   */\n  many: <referenceTable extends string, referenceColumn extends string>(\n    ref: `${referenceTable}.${referenceColumn}`,\n  ) => BuilderManyColumn<referenceTable, referenceColumn>;\n  /**\n   * Custom defined allowable value column type.\n   *\n   * - Docs: https://ponder.sh/docs/schema#enum\n   *\n   * @param type Enum defined elsewhere in the schema with `p.createEnum()`.\n   *\n   * @example\n   * export default createSchema((p) => ({\n   *   e: p.createEnum([\"ONE\", \"TWO\"])\n   *   t: p.createTable({\n   *     id: p.string(),\n   *     a: p.enum(\"e\"),\n   *   })\n   * }));\n   */\n  enum: <_enum extends string>(\n    __enum: _enum,\n  ) => BuilderEnumColumn<_enum, false, false>;\n  /**\n   * Create a table index.\n   *\n   * - Docs: https://ponder.sh/docs/schema#indexes\n   *\n   * @param columns Column or columns to include in the index.\n   *\n   * @example\n   * export default createSchema((p) => ({\n   *   t: p.createTable({\n   *     id: p.string(),\n   *     age: p.int(),\n   *   }, {\n   *     ageIndex: p.index(\"age\"),\n   *   })\n   * }));\n   */\n  index: <const column extends string | readonly string[]>(\n    c: column,\n  ) => BuilderIndex<column, undefined, undefined>;\n};\n\ntype CreateSchemaParameters<schema> = {} extends schema\n  ? {}\n  : {\n      [tableName in keyof schema]: schema[tableName] extends {\n        table: infer table extends Table;\n        constraints: infer constraints extends Constraints;\n      }\n        ? {\n            table: GetTable<table, tableName & string, schema>;\n            constraints: GetConstraints<constraints, table>;\n          }\n        : readonly string[];\n    };\n\nexport const createSchema = <const schema>(\n  _schema: (p: P) => CreateSchemaParameters<schema>,\n): unknown extends schema ? Schema : schema => {\n  // @ts-ignore\n  return _schema(P) as schema;\n};\n","export { createConfig } from \"@/config/config.js\";\nexport { createSchema } from \"@/schema/schema.js\";\nexport type { Block, Log, Transaction } from \"@/types/eth.js\";\nexport type { Virtual } from \"@/types/virtual.js\";\nexport {\n  type MergeAbis,\n  type ReplaceBigInts,\n  mergeAbis,\n  loadBalance,\n  rateLimit,\n  replaceBigInts,\n} from \"@ponder/utils\";\n\nimport type { Config } from \"@/config/config.js\";\nimport type { Prettify } from \"./types/utils.js\";\n\nexport type ContractConfig = Prettify<Config[\"contracts\"][string]>;\nexport type NetworkConfig = Prettify<Config[\"networks\"][string]>;\nexport type BlockConfig = Prettify<Config[\"blocks\"][string]>;\nexport type DatabaseConfig = Prettify<Config[\"database\"]>;\n"],"mappings":"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","names":["index"]}